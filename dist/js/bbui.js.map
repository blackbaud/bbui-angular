{
  "version": 3,
  "file": "bbui.js",
  "sources": [
    "src/contracts/promise.js",
    "src/contracts/uimodeling.js",
    "src/contracts/webshell.js",
    "src/core.js",
    "src/module.js",
    "src/shellservice.js",
    "src/uimodelingservice.js",
    "src/utils/browser.js",
    "src/utils/infinity.js",
    "src/utils/mockable.js",
    "src/utils/slug.js"
  ],
  "names": [],
  "mappingsxNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,O;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G;ACptelmjnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;ACxtYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K",
  "sourceRoot": "../..",
  "sourcesContent": [
    "// Add any documentation tags that do not belong elsewhere here.\r\n\r\n/**\r\n * @class promise\r\n *\r\n * See <a href=\"https://docs.angularjs.org/api/ng/service/$q\">$q</a>.\r\n *\r\n * Here is an example of how to use {@link bbui.shellservice.bbuiShellService.Service#dataListLoad dataListLoad} with promises:\r\n *\r\n * <pre><code>\r\n(function () {\r\n    'use strict';\r\n\r\n    angular.module(\"custom\", [\"bbui\"])\r\n    .factory(\"myfactory\", [\"bbuiShellServiceConfig\", \"bbuiShellService\",\r\n        function (bbuiShellServiceConfig, bbuiShellService) {\r\n\r\n            var svc,\r\n                DATALIST_ID = \"f1cf0b14-8f4e-48c8-9ecb-ddfcb1b5679d\",\r\n                contextRecordId = \"748e4ed3-a0c3-4a87-a363-572e20121c91\";\r\n\r\n            function getListResultsAsync(successCallback, failureCallback, finallyCallback) {\r\n\r\n                successCallback = successCallback || function () { };\r\n                failureCallback = failureCallback || function () { };\r\n                finallyCallback = finallyCallback || function () { };\r\n\r\n                svc = bbuiShellService.create();\r\n\r\n                svc.dataListLoad(\r\n                    DATALIST_ID,\r\n                    contextRecordId,\r\n                    {\r\n                        parameters: [\r\n                            {\r\n                                name: \"MYBOOLEANPARAM\",\r\n                                value: true\r\n                            }\r\n                        ]\r\n                    }\r\n                ).then(function (response) {\r\n                    successCallback(response.data);\r\n                }, function (response) {\r\n                    // The list failed to load for some reason. Maybe insufficient rights.\r\n                    failureCallback(response);\r\n                })\r\n                .finally(function () {\r\n                    finallyCallback();\r\n                });\r\n\r\n            }\r\n\r\n            return {\r\n                getListResultsAsync: getListResultsAsync\r\n            };\r\n\r\n        }]);\r\n\r\n}());\r\n\r\n * </code></pre>\r\n *\r\n */\r\n\r\n\r\n\r\n\r\n/*\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    angular.module(\"custom\", [\"bbui\"])\r\n    .factory(\"myfactory\", [\"bbuiShellServiceConfig\", \"bbuiShellService\",\r\n        function (bbuiShellServiceConfig, bbuiShellService) {\r\n\r\n            var authenticateSuccessCallback,\r\n                authenticateFailureCallback,\r\n                authenticateFinallyCallback,\r\n                svc,\r\n                FORMS_AUTH_HEADER = \"X-BB-FormsAuth\",\r\n                DATALIST_ID = \"f1cf0b14-8f4e-48c8-9ecb-ddfcb1b5679d\";\r\n\r\n            function getDatabaseName() {\r\n                return bbuiShellServiceConfig.databaseName;\r\n            }\r\n\r\n            function initialize() {\r\n\r\n                bbuiShellServiceConfig.baseUrl = \"/bbappfx\";\r\n                bbuiShellServiceConfig.databaseName = \"BBInfinity\";\r\n\r\n            }\r\n\r\n            function getWebShellLoginUrl(databaseName, status) {\r\n\r\n                var url,\r\n                    redirectUrl = window.location.href;\r\n\r\n                url = \"/\" + bbuiShellServiceConfig.baseUrl + \"/webui/WebShellLogin.aspx?databaseName=\" + euc(databaseName);\r\n\r\n                url += \"&url=\" + euc(redirectUrl);\r\n\r\n                if (status) {\r\n                    url += \"&status=\" + euc(status);\r\n                }\r\n\r\n                return url;\r\n            }\r\n\r\n            function sessionStartSuccess(reply) {\r\n                authenticateSuccessCallback(reply.data);\r\n                authenticateFinallyCallback();\r\n            }\r\n\r\n            function sessionStartFailure(data, status, headers) {\r\n\r\n                var redirectUrl;\r\n\r\n                // Unauthorized (401)\r\n                // NotFound (404) implies WSFederation Authenticated but unable to match to AppUser\r\n                if ((status === 401) || (status === 404)) {\r\n\r\n                    // Forms authentication is configured on the server.  Redirect to the login page.\r\n                    redirectUrl = getWebShellLoginUrl(svc.databaseName, headers(FORMS_AUTH_HEADER));\r\n                    window.location.replace(redirectUrl);\r\n                    authenticateFinallyCallback();\r\n                    // Don't call failure callback because we're just redirecting anyway.\r\n                } else {\r\n                    // Not totally sure what the response object looks like with non-401 error codes.\r\n                    // I think this should get the user something that is mildly helpful.\r\n                    if (!data || !data.message) {\r\n                        data = {\r\n                            message: data\r\n                        };\r\n                    }\r\n                    authenticateFailureCallback(data);\r\n                    authenticateFinallyCallback();\r\n                }\r\n\r\n            }\r\n\r\n            function startSession() {\r\n\r\n                // Need to save HTTP object since we need to do both .then and .error,\r\n                // which are not supported together.\r\n                var http = svc.sessionStart();\r\n\r\n                http.then(sessionStartSuccess);\r\n\r\n                http.error(sessionStartFailure);\r\n\r\n            }\r\n\r\n            function authenticateAsync(successCallback, failureCallback, finallyCallback) {\r\n\r\n                authenticateSuccessCallback = successCallback || function () { };\r\n                authenticateFailureCallback = failureCallback || function () { };\r\n                authenticateFinallyCallback = finallyCallback || function () { };\r\n\r\n                var httpHeaders = {};\r\n\r\n                // Add a custom HTTP header to all requests so the server will send back a 401 response without a challenge\r\n                // header when the user logs in unsuccessfully.  This will keep the user from being prompted for credentials\r\n                // by the browser.\r\n                httpHeaders[FORMS_AUTH_HEADER] = \"true\";\r\n\r\n                svc = bbuiShellService.create(null, null, {\r\n                    httpHeaders: httpHeaders\r\n                });\r\n\r\n                startSession();\r\n\r\n            }\r\n\r\n            function getListResultsAsync(successCallback, failureCallback, finallyCallback) {\r\n\r\n                successCallback = successCallback || function () { };\r\n                failureCallback = failureCallback || function () { };\r\n                finallyCallback = finallyCallback || function () { };\r\n\r\n                svc = bbuiShellService.create();\r\n\r\n                svc.dataListLoad(\r\n                    DATALIST_ID,\r\n                    contextRecordId,\r\n                    {\r\n                        parameters: [\r\n                            {\r\n                                name: \"MYBOOLEANPARAM\",\r\n                                value: true\r\n                            }\r\n                        ]\r\n                    }\r\n                ).then(function (response) {\r\n                    successCallback(response.data);\r\n                }, function (response) {\r\n                    // The list failed to load for some reason. Maybe insufficient rights.\r\n                    failureCallback(response);\r\n                })\r\n                .finally(function () {\r\n                    finallyCallback();\r\n                });\r\n\r\n            }\r\n\r\n            return {\r\n                getDatabaseName: getDatabaseName,\r\n                initialize: initialize,\r\n                authenticateAsync: authenticateAsync,\r\n                getListResultsAsync: getListResultsAsync\r\n            };\r\n\r\n        }]);\r\n\r\n}());\r\n*/",
    "// TODO generate docs\r\n\r\n/**\r\n * @class BBUI.uimodeling.servicecontracts.CreateDataFormSessionArgs\r\n */\r\n\r\n/**\r\n * @class BBUI.uimodeling.servicecontracts.CreateSearchListFormSessionArgs\r\n */\r\n\r\n /**\r\n  * @class BBUI.uimodeling.restservices.contracts.FieldValue\r\n  * Represents a field value for a UI model.\r\n  */\r\n\r\n    /**\r\n     * @property {String} name\r\n     * The name of the field.\r\n     */\r\n    /**\r\n     * @property {Object} [value]\r\n     * The field's value.\r\n     */\r\n    /**\r\n     * @property {String} [valueTranslation]\r\n     * The display text for the field value.\r\n     */\r\n    /**\r\n     * @property {BBUI.uimodeling.restservices.contracts.FieldValue[][]} [collectionValue]\r\n     * The field's values if the field represents a collection field.\r\n     */",
    "// TODO generate docs\r\n\r\n/**\r\n * @class BBUI.webshell.servicecontracts.DataListLoadReply\r\n */\r\n\r\n/**\r\n * @class BBUI.webshell.servicecontracts.SimpleDataListLoadReply\r\n */\r\n\r\n/**\r\n * @class BBUI.webshell.servicecontracts.RecordOperationPrompt\r\n */\r\n\r\n/**\r\n * @class BBUI.webshell.servicecontracts.DataFormLoadReply\r\n */\r\n\r\n/**\r\n * @class BBUI.webshell.servicecontracts.DataFormSaveReply\r\n */",
    "/*global angular */\r\n\r\n// Declare the one global variable under which all other BBUI components will reside.\r\n(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('bbui.core', [])\r\n        .factory('bbui', ['$window', function ($window) {\r\n            var BBUI,\r\n                // JSLint chokes on this regular expression if a literal is used.\r\n                escapeRegExpRegEx = new RegExp(\"[.*+?|()\\\\[\\\\]{}\\\\\\\\\\\\$\\\\^]\", \"g\"),\r\n                euc = $window.encodeURIComponent,\r\n                TYPE_STRING = \"string\";\r\n\r\n            function objEquals(value1, value2, ignoreCase) {\r\n                if (value1 === value2) {\r\n                    return true;\r\n                }\r\n\r\n                if (ignoreCase && typeof value1 === TYPE_STRING && typeof value2 === TYPE_STRING) {\r\n                    return value1.toUpperCase() === value2.toUpperCase();\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n            /**\r\n             * @class bbui\r\n             * Contains methods for issuing XMLHttpReqests as well as some basic helper functions.\r\n             * @singleton\r\n             */\r\n            BBUI = {\r\n\r\n                /**\r\n                 * @readonly\r\n                 * Represents an empty GUID value.\r\n                 * @type {String}\r\n                 */\r\n                emptyGuid: \"00000000-0000-0000-0000-000000000000\",\r\n\r\n                /**\r\n                 * Returns a flag indicating the given object is defined and its value is not null.   This function is mainly\r\n                 * used to see if a JSON property is present, since the absense of a property usually means \"no change\" rather\r\n                 * than \"this property's value was changed to null.\"\r\n                 * <br/><br/>\r\n                 * Calling this function is equivalent to evaluating <tt>typeof obj !== \"undefined\" && obj !== null</tt>.\r\n                 *\r\n                 * @param {Object} obj\r\n                 * The object to check.\r\n                 *\r\n                 * @return {Boolean}\r\n                 * False if the object is null or undefined; otherwise, true.\r\n                 */\r\n                is: function (obj) {\r\n                    return typeof obj !== \"undefined\" && obj !== null;\r\n                },\r\n\r\n                /**\r\n                 * Finds an item in an array with the specified property value.\r\n                 *\r\n                 * @param {Array} items\r\n                 * The array to search.\r\n                 *\r\n                 * @param {String} propName\r\n                 * The property's name.\r\n                 *\r\n                 * @param {Object} value\r\n                 * The property's value.\r\n                 *\r\n                 * @param {Boolean} [ignorePropCase=false]\r\n                 * Does a case-insensitive search on the property's name.\r\n                 *\r\n                 * @param {Boolean} [ignoreValueCase=false]\r\n                 * Does a case-insensitive search on the property's value.\r\n                 *\r\n                 * @return {Object}\r\n                 * The first item in the array that matches the property value (or null if no matching item is found).\r\n                 */\r\n                findByProp: function (items, propName, value, ignorePropCase, ignoreValueCase) {\r\n\r\n                    var i,\r\n                        item,\r\n                        propValue;\r\n\r\n                    if (items) {\r\n                        i = items.length || 0;\r\n                        while (i--) {\r\n                            item = items[i];\r\n\r\n                            if (item) {\r\n                                propValue = BBUI.getPropValue(item, propName, ignorePropCase);\r\n                                if (objEquals(propValue, value, ignoreValueCase)) {\r\n                                    return item;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    return null;\r\n                },\r\n\r\n                /**\r\n                 * Gets an object's property value using a case-insensitive comparison if specified.\r\n                 *\r\n                 * @param {Object} obj\r\n                 * The object containing the property.\r\n                 *\r\n                 * @param {String} propName\r\n                 * The name of the property.\r\n                 *\r\n                 * @param {Boolean} [ignoreCase]\r\n                 * Indicates whether to ignore case on the property.\r\n                 *\r\n                 * @param {Object} [defaultValue]\r\n                 * The default value to return if the property does not exist.\r\n                 *\r\n                 * @return {Object}\r\n                 */\r\n                getPropValue: function (obj, propName, ignoreCase, defaultValue) {\r\n\r\n                    var p,\r\n                        propNameUpper;\r\n\r\n                    if (obj && propName) {\r\n                        if (typeof obj[propName] !== \"undefined\") {\r\n                            return obj[propName];\r\n                        }\r\n\r\n                        if (ignoreCase) {\r\n                            propNameUpper = propName.toUpperCase();\r\n                            for (p in obj) {\r\n                                /*jslint forin: true */\r\n                                if (p.toUpperCase() === propNameUpper) {\r\n                                    return obj[p];\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    return defaultValue;\r\n                },\r\n\r\n                /**\r\n                 * Copies the properties of the specified object to a new object and returns the new object.\r\n                 *\r\n                 * @param {Object} obj\r\n                 * Object to clone.\r\n                 *\r\n                 * @return {Object}\r\n                 * The cloned object.\r\n                 */\r\n                clone: function (obj) {\r\n\r\n                    var cloneObj,\r\n                        p;\r\n\r\n                    if (typeof obj !== \"undefined\") {\r\n                        if (obj === null) {\r\n                            return null;\r\n                        }\r\n                        cloneObj = {};\r\n                        for (p in obj) {\r\n                            if (obj.hasOwnProperty(p)) {\r\n                                cloneObj[p] = obj[p];\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    return cloneObj;\r\n                },\r\n\r\n                /**\r\n                 * Copy properties from one object onto another.\r\n                 *\r\n                 * @param {Object} to\r\n                 * @param {Object} from\r\n                 */\r\n                copyProps: function (to, from) {\r\n                    var p;\r\n\r\n                    if (from) {\r\n                        for (p in from) {\r\n                            if (from.hasOwnProperty(p)) {\r\n                                to[p] = from[p];\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * Compares two GUID values by normalizing capitalization of each GUID and comparing them as strings.\r\n                 *\r\n                 * @param {String} guid1\r\n                 * The first GUID to compare.\r\n                 *\r\n                 * @param {String} guid2\r\n                 * The second GUID to compare.\r\n                 *\r\n                 * @param {String} [guid1Upper]\r\n                 * A flag indicating the first GUID is already upper-cased.  When true, a new upper-cased string is not created for the\r\n                 * first GUID for comparison.  Use this flag as an optimization when comparing GUIDs in a loop so a new string does not\r\n                 * have to be created for each iteration of the loop when the GUID does not change between iterations.\r\n                 *\r\n                 * @param {String} [guid2Upper]\r\n                 * A flag indicating the second GUID is already upper-cased.  When true, a new upper-cased string is not created for the\r\n                 * second GUID for comparison.  Use this flag as an optimization when comparing GUIDs in a loop so a new string does not\r\n                 * have to be created for each iteration of the loop when the GUID does not change between iterations.\r\n                 *\r\n                 * @return {Boolean}\r\n                 * A flag indicating whether the two GUIDs are the same.\r\n                 */\r\n                guidEquals: function (guid1, guid2, guid1Upper, guid2Upper) {\r\n\r\n                    if (typeof guid1 !== TYPE_STRING || typeof guid2 !== TYPE_STRING) {\r\n                        return false;\r\n                    }\r\n\r\n                    if (!guid1Upper) {\r\n                        guid1 = guid1.toUpperCase();\r\n                    }\r\n\r\n                    if (!guid2Upper) {\r\n                        guid2 = guid2.toUpperCase();\r\n                    }\r\n\r\n                    return guid1 === guid2;\r\n                },\r\n\r\n                /**\r\n                 * Parses the provided object name and returns a reference to the object it represents.\r\n                 *\r\n                 * @param {String} objName\r\n                 * The name of the object.\r\n                 *\r\n                 * @return {Object}\r\n                 * The corresponding object, or null if any part of the object is undefined.\r\n                 */\r\n                getObjByName: function (objName) {\r\n\r\n                    var i,\r\n                        n,\r\n                        obj,\r\n                        parts,\r\n                        part;\r\n\r\n                    // Split the object name on the period, then loop through the parts, building up a reference to the\r\n                    // object.  This essentially turns a string like \"BBUI.globals.myFunctionName\" into the object\r\n                    // window[\"BBUI\"][\"globals\"][\"myFunctionName\"].\r\n                    parts = objName.split(\".\");\r\n\r\n                    // Start with the window object.\r\n                    obj = $window;\r\n\r\n                    for (i = 0, n = parts.length; i < n; i++) {\r\n                        part = parts[i];\r\n                        if (!(i === 0 && part === \"window\")) {\r\n                            obj = obj[part];\r\n                            if (typeof obj === \"undefined\") {\r\n                                return null;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    return obj;\r\n                },\r\n\r\n                /**\r\n                 * Concatenates all the provided arguments as if they were portions of a URL, inserting forward slashes where appropriate.\r\n                 * @param {String} arg1 A portion of the URL.\r\n                 * @param {String} [arg2]\r\n                 * @param {String} [argN]\r\n                 *\r\n                 * @return {String} The concatenated URL.\r\n                 */\r\n                urlConcat: function (arg1) {\r\n\r\n                    var arg,\r\n                        argCount,\r\n                        argObj,\r\n                        i,\r\n                        url;\r\n\r\n                    argCount = arguments.length;\r\n\r\n                    if (argCount) {\r\n                        if (!BBUI.is(arg1)) {\r\n                            return null;\r\n                        }\r\n\r\n                        url = arg1.toString();\r\n\r\n                        for (i = 1; i < argCount; i++) {\r\n                            argObj = arguments[i];\r\n\r\n                            if (!BBUI.is(argObj)) {\r\n                                return null;\r\n                            }\r\n\r\n                            arg = argObj.toString();\r\n\r\n                            if (url.charAt(url.length - 1) !== \"/\" && arg.charAt(0) !== \"/\") {\r\n                                url += \"/\";\r\n                            }\r\n\r\n                            url += arg;\r\n                        }\r\n\r\n                        return url;\r\n                    }\r\n\r\n                    return null;\r\n                },\r\n\r\n                /**\r\n                 * Takes the special arguments object from a function and returns the arguments in a true array.\r\n                 *\r\n                 * @param {Object} args\r\n                 * The arguments object.\r\n                 *\r\n                 * @param {Number} [start]\r\n                 * The index of the first item to return.  When not specified, all the items are returned.\r\n                 *\r\n                 * @return {Object[]}\r\n                 * The array of arguments.\r\n                 */\r\n                argsToArray: function (args, start) {\r\n                    return Array.prototype.slice.call(args, start || 0);\r\n                },\r\n\r\n                /**\r\n                 * Takes an array of objects with an \"id\" or \"name\" property and a \"value\" property and returns\r\n                 * the items as a query string.\r\n                 *\r\n                 * @param {Object[]} items\r\n                 * The array of objects.\r\n                 *\r\n                 * @param {String} [itemPrefix]\r\n                 * The string to prepend to the query string item name.\r\n                 *\r\n                 * @param {Boolean} [prependAmpersand]\r\n                 * Flag indicating whether to prepend an ampersand to the returned query string.\r\n                 *\r\n                 * @return {String}\r\n                 * The query string.\r\n                 */\r\n                arrayToQueryString: function (items, itemPrefix, prependAmpersand) {\r\n\r\n                    var i,\r\n                        item,\r\n                        n,\r\n                        s;\r\n\r\n                    s = \"\";\r\n\r\n                    if (items && items.length) {\r\n                        itemPrefix = itemPrefix || \"\";\r\n\r\n                        for (i = 0, n = items.length; i < n; i++) {\r\n                            item = items[i];\r\n\r\n                            if (i > 0 || prependAmpersand) {\r\n                                s += \"&\";\r\n                            }\r\n\r\n                            s += itemPrefix + euc(item.id || item.name) + \"=\" + euc(item.value);\r\n                        }\r\n                    }\r\n\r\n                    return s;\r\n                },\r\n\r\n                /**\r\n                 * @return {String}\r\n                 */\r\n                getAbsoluteBaseUrl: function (relativeBaseUrl) {\r\n                    var baseUrl,\r\n                        i,\r\n                        serverPartsCount;\r\n\r\n                    if (!relativeBaseUrl) {\r\n                        return relativeBaseUrl;\r\n                    }\r\n\r\n                    serverPartsCount = relativeBaseUrl.split(\"/\").length;\r\n\r\n                    // NOTE: The base URL value used to be passed as a relative URL down from the server, but this caused problems\r\n                    // with mixed content warnings in IE8 when a URL on a DOM element (such as an href attribute on a LINK element\r\n                    // or a background-image CSS rule on a DIV element) was specified and then created and not added to the page or\r\n                    // removed from the page and then garbage collected.  This is due to a bug in IE8 where the protocol of \"about:\"\r\n                    // is assumed rather than the protocol specified on the current web page.  Changing the base URL to an absolute\r\n                    // URL by removing a known part of the URL here fixes this issue.  More information on the bug in IE that causes\r\n                    // the mixed content warning can be found here:\r\n                    // http://support.microsoft.com/kb/925014\r\n                    // http://www.pelagodesign.com/blog/2007/10/30/ie7-removechild-and-ssl/\r\n                    // http://blog.httpwatch.com/2009/09/17/even-more-problems-with-the-ie-8-mixed-content-warning/#comment-10632\r\n                    // http://blogs.msdn.com/b/ieinternals/archive/2009/06/22/https-mixed-content-in-ie8.aspx?PageIndex=3#comments\r\n\r\n                    // Also, a utility called \"Scriptfree\" was instrumental in tracking this bug down.  This was mentioned in a\r\n                    // comment on the IEInternals blog post above.\r\n                    // http://www.enhanceie.com/dl/scriptfreesetup.exe\r\n\r\n                    // Remove the query string since it's not relevant.\r\n                    baseUrl = $window.location.href.split(\"?\")[0];\r\n\r\n                    for (i = 0; i < serverPartsCount + 1; i++) {\r\n                        baseUrl = baseUrl.substr(0, baseUrl.lastIndexOf(\"/\"));\r\n                    }\r\n\r\n                    return baseUrl;\r\n                },\r\n\r\n                /**\r\n                 * Detemines whether the value of the first parameter ends with the value of the second parameter.\r\n                 *\r\n                 * @param {String} s\r\n                 * The value to search.\r\n                 *\r\n                 * @param {String} val\r\n                 * The value to find.\r\n                 *\r\n                 * @return {Boolean}\r\n                 * A flag indicating whether the value of the first parameter ends with the value of the second parameter.\r\n                 */\r\n                endsWith: function (s, val) {\r\n                    var pos;\r\n\r\n                    if (typeof s === TYPE_STRING && typeof val === TYPE_STRING) {\r\n                        pos = s.length - val.length;\r\n                        return pos >= 0 && s.lastIndexOf(val) === pos;\r\n                    }\r\n\r\n                    return false;\r\n                },\r\n\r\n                /**\r\n                 * Overrides functions on the first argument with properties from the second argument and returns an object\r\n                 * with the original base functions.\r\n                 *\r\n                 * @param {Object} to\r\n                 * The object whose functions are to be overridden.\r\n                 *\r\n                 * @param {Object} from\r\n                 * The Object containing the override functions.\r\n                 *\r\n                 * @return {Object}\r\n                 * The object containing the original functions.\r\n                 */\r\n                override: function (to, from) {\r\n                    var base,\r\n                        overridden,\r\n                        p;\r\n\r\n                    base = {};\r\n\r\n                    for (p in from) {\r\n                        if (from.hasOwnProperty(p)) {\r\n                            overridden = to[p];\r\n\r\n                            if (overridden) {\r\n                                base[p] = overridden;\r\n                            }\r\n\r\n                            to[p] = from[p];\r\n                        }\r\n                    }\r\n\r\n                    return base;\r\n                },\r\n\r\n                /**\r\n                 * @return {String}\r\n                 */\r\n                escapeRegExp: function (filter) {\r\n                    if (typeof filter === TYPE_STRING) {\r\n                        return filter.replace(escapeRegExpRegEx, '\\\\$&');\r\n                    }\r\n\r\n                    return null;\r\n                }\r\n\r\n            };\r\n\r\n            return BBUI;\r\n\r\n        }]);\r\n\r\n}());\r\n",
    "/*global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('bbui', ['bbui.core', 'bbui.shellservice', 'bbui.uimodelingservice']);\r\n\r\n}());",
    "/*global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('bbui.shellservice', ['bbui.core'])\r\n        /**\r\n         * @class bbui.shellservice.bbuiShellServiceConfig\r\n         */\r\n        .constant('bbuiShellServiceConfig', {\r\n            /**\r\n             * @cfg {String} baseUrl\r\n             */\r\n            baseUrl: null,\r\n            /**\r\n             * @cfg {String} databaseName\r\n             */\r\n            databaseName: null\r\n        })\r\n        .factory('bbuiShellService', ['$http', 'bbui', 'bbuiShellServiceConfig', function ($http, BBUI, bbuiShellServiceConfig) {\r\n            var Service;\r\n\r\n            (function () {\r\n                // Shorter alias for commonly-used function.\r\n                var euc = encodeURIComponent,\r\n                    paramPrefix = \"p_\";\r\n\r\n                function pushIf(sb, qsVarName, value, condition) {\r\n                    if (typeof condition === \"undefined\") {\r\n                        condition = !!value;\r\n                    }\r\n\r\n                    if (condition) {\r\n                        sb.push(\"&\" + qsVarName + \"=\");\r\n                        sb.push(euc(value));\r\n                    }\r\n                }\r\n\r\n                function buildBaseUrl(svc, fileName, action, pageId, tabId, sectionId, actionId, contextRecordId) {\r\n                    var sb;\r\n\r\n                    sb = [];\r\n\r\n                    if (svc.proxyUrl) {\r\n                        sb.push(svc.proxyUrl +\r\n                            (svc.proxyUrl.indexOf(\"?\") >= 0 ? \"&\" : \"?\") +\r\n                            \"fileName=\" +\r\n                            euc(fileName) +\r\n                            \"&\");\r\n                    } else {\r\n                        sb.push(BBUI.urlConcat(svc.baseUrl, \"webui/\" + fileName + \"?\"));\r\n                    }\r\n\r\n                    sb.push(\"databaseName=\" + euc(svc.databaseName));\r\n\r\n                    pushIf(sb, \"runAs\", svc.runAs);\r\n\r\n                    pushIf(sb, \"action\", action);\r\n                    pushIf(sb, \"pageId\", pageId);\r\n                    pushIf(sb, \"tabId\", tabId);\r\n                    pushIf(sb, \"sectionId\", sectionId);\r\n                    pushIf(sb, \"actionId\", actionId);\r\n                    pushIf(sb, \"contextRecordId\", contextRecordId);\r\n\r\n                    return sb.join(\"\");\r\n                }\r\n\r\n                function buildSvcBaseUrl(svc, action, pageId, tabId, sectionId, actionId, contextRecordId) {\r\n                    return buildBaseUrl(svc, \"WebShellService.ashx\", action, pageId, tabId, sectionId, actionId, contextRecordId);\r\n                }\r\n\r\n                function buildAdHocQuerySvcBaseUrl(svc) {\r\n                    return buildBaseUrl(svc, \"WebShellAdHocQueryService.ashx\");\r\n                }\r\n\r\n                function buildDataListSvcBaseUrl(svc, dataListId, pageId, tabId, sectionId) {\r\n                    var url;\r\n\r\n                    url = buildBaseUrl(svc, \"WebShellDataListService.ashx\", null, pageId, tabId, sectionId) +\r\n                        \"&dataListId=\" +\r\n                        euc(dataListId);\r\n\r\n                    return url;\r\n                }\r\n\r\n                function buildSearchListSvcBaseUrl(svc, searchListId, criteria) {\r\n                    return buildBaseUrl(svc, \"WebShellSearchListService.ashx\") +\r\n                        \"&searchListId=\" +\r\n                        euc(searchListId) +\r\n                        \"&criteria=\" +\r\n                        euc(criteria);\r\n                }\r\n\r\n                function addSecurityContext(url, options) {\r\n                    if (options) {\r\n                        if (options.securityContextFeatureId) {\r\n                            url += \"&securityContextFeatureId=\" + euc(options.securityContextFeatureId);\r\n                        }\r\n\r\n                        if (BBUI.is(options.securityContextFeatureType)) {\r\n                            url += \"&securityContextFeatureType=\" + euc(options.securityContextFeatureType);\r\n                        }\r\n                    }\r\n\r\n                    return url;\r\n                }\r\n\r\n                function getHeaders(svc) {\r\n                    var headers;\r\n\r\n                    headers = {};\r\n\r\n                    BBUI.copyProps(headers, bbuiShellServiceConfig.globalHttpHeaders);\r\n                    BBUI.copyProps(headers, svc.httpHeaders);\r\n\r\n                    return headers;\r\n                }\r\n\r\n                function doRequest(svc, method, url, data) {\r\n                    return svc.$http({\r\n                        method: method,\r\n                        url: url,\r\n                        data: data,\r\n                        headers: getHeaders(svc),\r\n                        cache: false\r\n                    });\r\n                }\r\n\r\n                function doGet(svc, url) {\r\n                    return svc.doGet(url);\r\n                }\r\n\r\n                function doPost(svc, url, data) {\r\n                    return svc.doPost(url, data);\r\n                }\r\n\r\n                /**\r\n                 * @class bbui.shellservice.bbuiShellService.Service\r\n                 * Provides various methods for communicating with the web shell endpoints on the web server.\r\n                 * <br/><br/>\r\n                 * Note that all methods that make a call to the web server have the same last three arguments:\r\n                 *\r\n                 * @param {String} baseUrl\r\n                 * The base URL to the web server.\r\n                 *\r\n                 * @param {String} databaseName\r\n                 * The name of the database to which to connect.\r\n                 *\r\n                 * @param {Object} [options]\r\n                 *\r\n                 * @param {String} options.proxyUrl\r\n                 * A URL to a web server that acts as a proxy between the client and the AppFx web server.\r\n                 * This is useful in cases where the host page is hosted on a server other than the AppFx web server\r\n                 * and the browser would otherwise block the request for being a cross-site request.\r\n                 *\r\n                 * @param {String} options.runAs\r\n                 *\r\n                 * @param {Object} options.onRequestBegin\r\n                 *\r\n                 * @param {Object} options.onRequestEnd\r\n                 *\r\n                 * @param {Object} options.httpHeaders\r\n                 *\r\n                 */\r\n                Service = function (baseUrl, databaseName, options) {\r\n\r\n                    var svc;\r\n\r\n                    svc = this;\r\n\r\n                    svc.baseUrl = baseUrl;\r\n                    svc.databaseName = databaseName;\r\n\r\n                    if (options) {\r\n                        svc.runAs = options.runAs;\r\n                        svc.onRequestBegin = options.onRequestBegin;\r\n                        svc.onRequestEnd = options.onRequestEnd;\r\n                        svc.httpHeaders = options.httpHeaders;\r\n                        svc.proxyUrl = options.proxyUrl;\r\n                    }\r\n                };\r\n\r\n                Service.prototype = {\r\n\r\n                    /**\r\n                     * @readonly\r\n                     * The base URL to the web server.\r\n                     * @property baseUrl\r\n                     * @type String\r\n                     */\r\n                    baseUrl: null,\r\n\r\n                    /**\r\n                     * @readonly\r\n                     * The name of the database to which to connect.\r\n                     * @property databaseName\r\n                     * @type String\r\n                     */\r\n                    databaseName: null,\r\n\r\n                    /**\r\n                     * @private\r\n                     * Validates a user name and password for a given user.\r\n                     *\r\n                     * @param {Object} loginInfo An object with username and password properties.\r\n                     *\r\n                     * @return {promise}\r\n                     */\r\n                    login: function (loginInfo) {\r\n                        var url;\r\n\r\n                        url = buildBaseUrl(this, \"WebShellLogin.aspx\") + \"&action=login\";\r\n\r\n                        return doPost(this, url, loginInfo);\r\n                    },\r\n\r\n                    /**\r\n                     * @private\r\n                     * Removes the session cookie that keeps the user logged in.\r\n                     *\r\n                     * @return {promise}\r\n                     */\r\n                    logout: function () {\r\n                        var url;\r\n\r\n                        url = buildBaseUrl(this, \"WebShellLogin.aspx\") + \"&action=logout\";\r\n\r\n                        return doPost(this, url, null);\r\n                    },\r\n\r\n                    /**\r\n                     * @private\r\n                     * Requests a password reset link and emails it to the associated user.\r\n                     *\r\n                     * @param {Object} emailAddress\r\n                     * The user's email address.\r\n                     *\r\n                     * @return {promise}\r\n                     */\r\n                    sendPasswordResetLink: function (emailAddress) {\r\n                        var url;\r\n\r\n                        url = buildBaseUrl(this, \"WebShellLogin.aspx\") + \"&action=sendPasswordResetLink&emailAddress=\" + emailAddress;\r\n\r\n                        return doPost(this, url, null);\r\n                    },\r\n\r\n                    /**\r\n                     * @private\r\n                     * Resets the user's password.\r\n                     *\r\n                     * @param {Object} request\r\n                     * An object containing token and newPassword properties.\r\n                     *\r\n                     * @return {promise}\r\n                     */\r\n                    resetPassword: function (request) {\r\n                        var url;\r\n\r\n                        url = buildBaseUrl(this, \"WebShellLogin.aspx\") + \"&action=resetPassword\";\r\n\r\n                        return doPost(this, url, request);\r\n                    },\r\n\r\n                    /**\r\n                     * @private\r\n                     * Starts the user's session and returns navigation information for web shell.\r\n                     *\r\n                     * @return {promise}\r\n                     */\r\n                    sessionStart: function () {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"sessionStart\");\r\n\r\n                        return doPost(this, url, null);\r\n                    },\r\n\r\n                    /**\r\n                     * @private\r\n                     * Gets the site-wide navigation information for web shell.\r\n                     *\r\n                     * @param {Object} [options]\r\n                     *\r\n                     * @param {Boolean} options.refreshCache\r\n                     *\r\n                     * @return {promise}\r\n                     */\r\n                    getNavigation: function (options) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"getNavigation\");\r\n\r\n                        if (options.refreshCache) {\r\n                            url += \"&refreshCache=true\";\r\n                        }\r\n\r\n                        return doGet(this, url);\r\n                    },\r\n\r\n                    /**\r\n                     * @private\r\n                     * Gets the specified page's metadata.\r\n                     *\r\n                     * @param {String} pageId\r\n                     * The ID of the page.\r\n                     *\r\n                     * @param {String} [recordId]\r\n                     * The ID of the record to be shown by the page.\r\n                     *\r\n                     * @param {Object} [options]\r\n                     *\r\n                     * @param {Boolean} options.firstTab\r\n                     * Indicates that the first visible tab's full metadata should be returned.  Only the caption for other tabs will be returned.\r\n                     *\r\n                     * @param {String} options.tabId\r\n                     * The ID of the tab whose full metadata should be returned.  Only the caption for other tabs will be returned.\r\n                     *\r\n                     * @param {String} options.listBuilderInstanceId\r\n                     *\r\n                     * @return {promise}\r\n                     */\r\n                    getPage: function (pageId, recordId, options) {\r\n                        var url;\r\n\r\n                        options = options || {};\r\n\r\n                        url = buildSvcBaseUrl(this, \"getPage\", pageId, options.tabId, null, null, recordId);\r\n\r\n                        if (options.firstTab) {\r\n                            url += \"&firstTab=true\";\r\n                        }\r\n                        if (options.listBuilderInstanceId) {\r\n                            url += \"&listBuilderInstanceId=\" + euc(options.listBuilderInstanceId);\r\n                        }\r\n\r\n                        return doGet(this, url);\r\n                    },\r\n\r\n                    /**\r\n                    * @private\r\n                    * Gets the specified page's metadata.\r\n                    *\r\n                    * @param {String} pageId\r\n                    * The ID of the page.\r\n                    *\r\n                    * @return {promise}\r\n                    */\r\n                    getPageIsCustomizable: function (pageId) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"getPageIsCustomizable\", pageId);\r\n\r\n                        return doGet(this, url);\r\n                    },\r\n\r\n                    /**\r\n                     * @private\r\n                     * Gets the specified page tab's metadata.\r\n                     *\r\n                     * @param {String} pageId\r\n                     * The ID of the page.\r\n                     *\r\n                     * @param {String} tabId The ID of the tab.\r\n                     * @param {String} recordId The ID of the record to be shown by the page.\r\n                     *\r\n                     * @return {promise}\r\n                     */\r\n                    getPageTab: function (pageId, tabId, recordId) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"getPageTab\", pageId, tabId, null, null, recordId);\r\n\r\n                        return doGet(this, url);\r\n                    },\r\n\r\n                    /**\r\n                     * @private\r\n                     * Builds a page on the server according to the specified report and returns that page's metadata.\r\n                     *\r\n                     * @param {String} reportId The ID of the report.\r\n                     *\r\n                     * @param {Object} [options]\r\n                     *\r\n                     * @param {String} options.historyId\r\n                     *\r\n                     * @param {String} options.caption\r\n                     *\r\n                     * @param {String} options.displayPromptArea\r\n                     *\r\n                     * @param {Object[]} options.parameters\r\n                     *\r\n                     * @return {promise}\r\n                     */\r\n                    getReportPage: function (reportId, options) {\r\n                        var url;\r\n\r\n                        options = options || {};\r\n\r\n                        url = buildSvcBaseUrl(this, \"getReportPage\") +\r\n                            \"&reportId=\" + euc(reportId);\r\n\r\n                        if (options.historyId) {\r\n                            url += \"&historyId=\" + euc(options.historyId);\r\n                        }\r\n\r\n                        if (options.caption) {\r\n                            url += \"&caption=\" + euc(options.caption);\r\n                        }\r\n\r\n                        if (options.displayPromptArea) {\r\n                            url += \"&displayPromptArea=\" + euc(options.displayPromptArea);\r\n                        }\r\n\r\n                        url += BBUI.arrayToQueryString(options.parameters, paramPrefix, true);\r\n\r\n                        return doGet(this, url, options);\r\n                    },\r\n\r\n                    /**\r\n                     * @private\r\n                     * Gets the action metadata for a functional area's task.\r\n                     *\r\n                     * @param {String} functionalAreaId\r\n                     * The ID of the functional area.\r\n                     *\r\n                     * @param {String} taskId\r\n                     * The ID of the functional area's task.\r\n                     *\r\n                     * @return {promise}\r\n                     */\r\n                    getFunctionalAreaTaskAction: function (functionalAreaId, taskId) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"getFunctionalAreaTaskAction\");\r\n\r\n                        if (functionalAreaId) {\r\n                            url += \"&functionalAreaId=\" + euc(functionalAreaId);\r\n                        }\r\n\r\n                        if (taskId) {\r\n                            url += \"&taskId=\" + euc(taskId);\r\n                        }\r\n\r\n                        return doGet(this, url);\r\n                    },\r\n\r\n                    /**\r\n                     * @private\r\n                     * Returns a task as the variable reply for the callback\r\n                     *\r\n                     * @param {String} taskId\r\n                     * The ID of the task.\r\n                     *\r\n                     * @return {promise}\r\n                     */\r\n                    getTaskAction: function (taskId) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"getTaskAction\");\r\n\r\n                        if (taskId) {\r\n                            url += \"&taskId=\" + euc(taskId);\r\n                        }\r\n\r\n                        return doGet(this, url);\r\n                    },\r\n\r\n                    /**\r\n                     * @private\r\n                     * Gets the metadata for a page-level action.\r\n                     *\r\n                     * @param {String} pageId\r\n                     * The ID of the page.\r\n                     *\r\n                     * @param {String} actionId\r\n                     * The ID of the page's action.\r\n                     *\r\n                     * @param {String} contextRecordId\r\n                     *\r\n                     * @return {promise}\r\n                     */\r\n                    getPageAction: function (pageId, actionId, contextRecordId) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"getPageAction\", pageId, null, null, actionId, contextRecordId);\r\n\r\n                        return doGet(this, url);\r\n                    },\r\n\r\n                    /**\r\n                     * @private\r\n                     * Gets the metadata for a page section.\r\n                     *\r\n                     * @param {String} pageId\r\n                     * The ID of the page.\r\n                     *\r\n                     * @param {String} tabId\r\n                     * The ID of the tab to which the section belongs.\r\n                     *\r\n                     * @param {String} sectionId\r\n                     * The ID of the section.\r\n                     *\r\n                     * @param {String} [contextRecordId]\r\n                     * The ID of the page's context record.\r\n                     *\r\n                     * @return {promise}\r\n                     */\r\n                    getPageSection: function (pageId, tabId, sectionId, contextRecordId) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"getPageSection\", pageId, tabId, sectionId, null, contextRecordId);\r\n\r\n                        return doGet(this, url);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    getPageDataFormSectionAction: function (pageId, tabId, sectionId, actionId, contextRecordId, formSessionId, modelInstanceId) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"getPageDataFormSectionAction\", pageId, tabId, sectionId, actionId, contextRecordId) +\r\n                            \"&formSessionId=\" +\r\n                            euc(formSessionId) +\r\n                            \"&modelInstanceId=\" +\r\n                            euc(modelInstanceId);\r\n\r\n                        return doPost(this, url, null);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    getPageReportSectionAction: function (pageId, tabId, sectionId, actionId, contextRecordId, options) {\r\n                        var reportValues,\r\n                            url;\r\n\r\n                        if (options) {\r\n                            reportValues = options.reportValues;\r\n                        }\r\n\r\n                        url = buildSvcBaseUrl(this, \"getPageReportSectionAction\", pageId, tabId, sectionId, actionId, contextRecordId);\r\n\r\n                        return doPost(this, url, reportValues);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    getPageUIWidgetSectionAction: function (pageId, tabId, sectionId, actionId, contextRecordId, options) {\r\n                        var row = null,\r\n                            url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"getPageUIWidgetSectionAction\", pageId, tabId, sectionId, actionId, contextRecordId);\r\n\r\n                        if (options) {\r\n                            if (options.pageRecordId) {\r\n                                url += \"&pageRecordId=\" + euc(options.pageRecordId);\r\n                            }\r\n\r\n                            if (options.rowValues) {\r\n                                row = options.rowValues;\r\n                            }\r\n                        }\r\n\r\n                        return doPost(this, url, row);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    getPageUrlSectionAction: function (pageId, tabId, sectionId, actionId, contextRecordId, options) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"getPageUrlSectionAction\", pageId, tabId, sectionId, actionId, contextRecordId);\r\n\r\n                        if (options) {\r\n                            if (options.pageRecordId) {\r\n                                url += \"&pageRecordId=\" + euc(options.pageRecordId);\r\n                            }\r\n                        }\r\n\r\n                        return doPost(this, url, null);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    getPageDataListSectionAction: function (pageId, tabId, sectionId, actionId, contextRecordId, row, options) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"getPageDataListSectionAction\", pageId, tabId, sectionId, actionId, contextRecordId);\r\n\r\n                        if (options) {\r\n                            if (options.pageRecordId) {\r\n                                url += \"&pageRecordId=\" + euc(options.pageRecordId);\r\n                            }\r\n                            if (options.formSessionId) {\r\n                                url += \"&formSessionId=\" + euc(options.formSessionId);\r\n                            }\r\n                            if (options.modelInstanceId) {\r\n                                url += \"&modelInstanceId=\" + euc(options.modelInstanceId);\r\n                            }\r\n                        }\r\n\r\n                        return doPost(this, url, row);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    getPageListBuilderSectionAction: function (pageId, tabId, sectionId, actionId, contextRecordId, row, options) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"getPageListBuilderSectionAction\", pageId, tabId, sectionId, actionId, contextRecordId);\r\n\r\n                        if (options && options.pageRecordId) {\r\n                            url += \"&pageRecordId=\" + euc(options.pageRecordId);\r\n                        }\r\n\r\n                        return doPost(this, url, row);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    getListBuilderAvailableColumns: function (queryViewId) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"getListBuilderAvailableColumns\") + \"&queryViewId=\" + queryViewId;\r\n\r\n                        return doGet(this, url);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    listBuilderGetInstanceXml: function (queryViewId, request, options) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"listBuilderGetInstanceXml\") +\r\n                            \"&queryViewId=\" +\r\n                            euc(queryViewId);\r\n\r\n                        if (options.parameterFormSessionId) {\r\n                            url += \"&parameterFormSessionId=\" + euc(options.parameterFormSessionId);\r\n                        }\r\n\r\n                        return doPost(this, url, request);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    listBuilderGetInstance: function (listBuilderInstanceId) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"listBuilderGetInstance\") + \"&listBuilderInstanceId=\" + listBuilderInstanceId;\r\n\r\n                        return doGet(this, url);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    listBuilderClearAllSettings: function (userSettingsPath, queryViewId) {\r\n\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"listBuilderClearAllSettings\") +\r\n                            \"&userSettingsPath=\" + userSettingsPath +\r\n                            \"&queryViewId=\" + queryViewId;\r\n\r\n                        return doGet(this, url);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    adHocQueryClearAllSettings: function (userSettingsPath, adHocQueryId) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"adHocQueryClearAllSettings\") +\r\n                            \"&userSettingsPath=\" + userSettingsPath +\r\n                            \"&adHocQueryId=\" + adHocQueryId;\r\n\r\n                        return doGet(this, url);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    getAdHocQueryAvailableColumns: function (adHocQueryId) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"getAdHocQueryAvailableColumns\") + \"&adHocQueryId=\" + adHocQueryId;\r\n\r\n                        return doGet(this, url);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    getPageSummarySectionAction: function (pageId, actionId, contextRecordId, formSessionId, modelInstanceId) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"getPageSummarySectionAction\", pageId, null, null, actionId, contextRecordId) +\r\n                            \"&formSessionId=\" +\r\n                            euc(formSessionId) +\r\n                            \"&modelInstanceId=\" +\r\n                            euc(modelInstanceId);\r\n\r\n                        return doGet(this, url);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    evaluateDataListSectionActions: function (pageId, tabId, sectionId, contextRecordId, row, options) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"evaluateDataListSectionActions\", pageId, tabId, sectionId, null, contextRecordId);\r\n\r\n                        if (options) {\r\n                            if (options.pageRecordId) {\r\n                                url += \"&pageRecordId=\" + euc(options.pageRecordId);\r\n                            }\r\n                        }\r\n\r\n                        return doPost(this, url, row);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    evaluateListBuilderSectionActions: function (pageId, tabId, sectionId, contextRecordId, row, options) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"evaluateListBuilderSectionActions\", pageId, tabId, sectionId, null, contextRecordId);\r\n\r\n                        if (options && options.pageRecordId) {\r\n                            url += \"&pageRecordId=\" + euc(options.pageRecordId);\r\n                        }\r\n\r\n                        return doPost(this, url, row);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    evaluateDataFormSectionActions: function (pageId, tabId, sectionId, contextRecordId, formSessionId, modelInstanceId) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"evaluateDataFormSectionActions\", pageId, tabId, sectionId, null, contextRecordId) +\r\n                            \"&formSessionId=\" +\r\n                            euc(formSessionId) +\r\n                            \"&modelInstanceId=\" +\r\n                            euc(modelInstanceId);\r\n\r\n                        return doPost(this, url, null);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    dataListGetOutputDefinition: function (dataListId, options) {\r\n                        var url;\r\n\r\n                        options = options || {};\r\n                        options.cache = true;\r\n\r\n                        url = BBUI.urlConcat(this.baseUrl, \"webui/mc/\") + euc(this.databaseName) + \"/d/\" + euc(dataListId) + \".\" + (options.timestamp || 0) + \"_bbmd.ashx\";\r\n\r\n                        return doGet(this, url);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    queryViewGetOutputDefinition: function (queryViewId, options) {\r\n                        var url;\r\n\r\n                        options = options || {};\r\n                        options.cache = true;\r\n\r\n                        url = BBUI.urlConcat(this.baseUrl, \"webui/mc/\") + euc(this.databaseName) + \"/q/\" + euc(queryViewId) + \".\" + (options.timestamp || 0) + \"_bbmd.ashx\";\r\n\r\n                        return doGet(this, url);\r\n                    },\r\n\r\n                    /**\r\n                     * Loads the results of the specified data list and passes the {@link BBUI.webshell.servicecontracts.DataListLoadReply reply object}\r\n                     * to the promise.\r\n                     *\r\n                     * @param {String} dataListId\r\n                     * The ID of the data list to load.\r\n                     *\r\n                     * @param {String} [contextRecordId]\r\n                     * The ID of the data list's context record.\r\n                     *\r\n                     * @param {Object} [options]\r\n                     *\r\n                     * @param {String} options.pageRecordId\r\n                     * The ID of the page's context record where the data list is rendered.\r\n                     *\r\n                     * @param {String} options.parameterFormSessionId\r\n                     * The ID of the form session that provides parameters to the data list.\r\n                     *\r\n                     * @param {Object[]} options.parameters\r\n                     * An array of objects containing <tt>name</tt> and <tt>value</tt> properties used to filter the data list results.\r\n                     * @param {String} options.parameters.name\r\n                     * @param {Object} options.parameters.value\r\n                     *\r\n                     * @param {Boolean} options.returnFlotData\r\n                     * A flag indicating the data should be returned in a format readable by flot charts.\r\n                     *\r\n                     * @param {Boolean} options.returnFormattedValues\r\n                     * Flag indicating the data list should return formatted values along with the raw values.\r\n                     *\r\n                     * @param {String} options.userSettingsPath\r\n                     * The path used as the key to store user information about the data list, such as column sizes or the last filter values used.\r\n                     *\r\n                     * @return {promise}\r\n                     */\r\n                    dataListLoad: function (dataListId, contextRecordId, options) {\r\n                        var sb,\r\n                            url;\r\n\r\n                        options = options || {};\r\n\r\n                        sb = [buildDataListSvcBaseUrl(this, dataListId)];\r\n\r\n                        pushIf(sb, \"recordId\", contextRecordId);\r\n\r\n                        if (options) {\r\n                            pushIf(sb, \"returnFormattedValues\", \"true\", !!options.returnFormattedValues);\r\n                            pushIf(sb, \"pageRecordId\", options.pageRecordId);\r\n                            pushIf(sb, \"parameterFormSessionId\", options.parameterFormSessionId);\r\n                            pushIf(sb, \"functionalAreaId\", options.functionalAreaId);\r\n                            pushIf(sb, \"uiWidgetId\", options.uiWidgetId);\r\n                            pushIf(sb, \"personalizationMode\", options.personalizationMode);\r\n                            pushIf(sb, \"userSettingsPath\", options.userSettingsPath);\r\n                            pushIf(sb, \"returnFlotData\", \"true\", !!options.returnFlotData);\r\n                            pushIf(sb, \"pageId\", options.pageId);\r\n                            pushIf(sb, \"tabId\", options.tabId);\r\n                            pushIf(sb, \"sectionId\", options.sectionId);\r\n                            pushIf(sb, \"moreRowsRangeKey\", options.moreRowsRangeKey);\r\n                            pushIf(sb, \"discardRows\", \"true\", !!options.discardRows);\r\n                            pushIf(sb, \"returnPageNavigationTree\", \"true\", !!options.returnPageNavigationTree);\r\n                            pushIf(sb, \"limit\", options.limit);\r\n                            pushIf(sb, \"cancelId\", options.cancelId);\r\n\r\n                            sb.push(BBUI.arrayToQueryString(options.parameters, paramPrefix, true));\r\n                        }\r\n\r\n                        url = sb.join(\"\");\r\n\r\n                        return doGet(this, url);\r\n                    },\r\n\r\n                    /**\r\n                     * Loads the results of the specified simple data list and passes the {@link BBUI.webshell.servicecontracts.SimpleDataListLoadReply reply object}\r\n                     * to the promise.\r\n                     *\r\n                     * @param {String} simpleDataListId\r\n                     * The ID of the simple data list to load.\r\n                     *\r\n                     * @param {Object} [options]\r\n                     *\r\n                     * @param {Object[]} options.parameters\r\n                     * An array of objects containing <tt>name</tt> and <tt>value</tt> properties used to filter the simple data list results.\r\n                     * @param {String} options.parameters.name\r\n                     * @param {Object} options.parameters.value\r\n                     * \r\n                     * @param {String} [options.securityContextFeatureId]\r\n                     * The feature ID that provides implied security for the given simple data list.\r\n                     *\r\n                     * @param {String} [options.securityContextFeatureType]\r\n                     * The feature type of the feature providing implied security for the given data list.\r\n                     *\r\n                     * @return {promise}\r\n                     */\r\n                    simpleDataListLoad: function (simpleDataListId, options) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"simpleDataListLoad\") +\r\n                            \"&simpleDataListId=\" + euc(simpleDataListId);\r\n\r\n                        if (options) {\r\n                            url += BBUI.arrayToQueryString(options.parameters, paramPrefix, true);\r\n                            url = addSecurityContext(url, options);\r\n                        }\r\n\r\n                        return doGet(this, url);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {String}\r\n                     */\r\n                    buildPageSectionDataListResultsUrl: function (pageId, tabId, sectionId, dataListId, options) {\r\n                        var sb,\r\n                            url;\r\n\r\n                        if (!options) {\r\n                            options = {};\r\n                        }\r\n\r\n                        sb = [buildDataListSvcBaseUrl(this, dataListId, pageId, tabId, sectionId)];\r\n\r\n                        pushIf(sb, \"recordId\", options.contextRecordId);\r\n                        pushIf(sb, \"pageRecordId\", options.pageRecordId);\r\n                        pushIf(sb, \"returnFormattedValues\", \"true\", options.returnFormattedValues);\r\n                        // Adding moreRowsRangeKey back here\r\n                        // Since buildResultsUrl is always called now to set the proxy connection url, we should always be getting the correct value\r\n                        pushIf(sb, \"moreRowsRangeKey\", options.moreRowsRangeKey);\r\n                        pushIf(sb, \"previousRowCount\", options.previousRowCount);\r\n                        pushIf(sb, \"parameterFormSessionId\", options.parameterFormSessionId);\r\n                        pushIf(sb, \"personalizationMode\", options.personalizationMode);\r\n                        pushIf(sb, \"userSettingsPath\", options.userSettingsPath);\r\n                        pushIf(sb, \"exportFormat\", options.exportFormat);\r\n                        pushIf(sb, \"cancelId\", options.cancelId);\r\n\r\n                        sb.push(BBUI.arrayToQueryString(options.parameters, paramPrefix, true));\r\n\r\n                        url = sb.join(\"\");\r\n\r\n                        return url;\r\n                    },\r\n\r\n                    /**\r\n                     * @return {String}\r\n                     */\r\n                    buildPageSectionAdHocQueryListResultsUrl: function (pageId, tabId, sectionId, adHocQueryId, queryViewId, options) {\r\n                        var sb,\r\n                            svc = this,\r\n                            url;\r\n\r\n                        sb = [buildBaseUrl(svc, \"WebShellAdHocQueryListService.ashx\") +\r\n                            \"&adHocQueryId=\" + euc(adHocQueryId) +\r\n                            \"&queryViewId=\" + euc(queryViewId) +\r\n                            \"&returnResults=true\"];\r\n\r\n                        options = options || {};\r\n\r\n                        pushIf(sb, \"returnFormattedValues\", \"true\", options.returnFormattedValues);\r\n                        pushIf(sb, \"parameterFormSessionId\", options.parameterFormSessionId);\r\n                        pushIf(sb, \"pageId\", pageId);\r\n                        pushIf(sb, \"tabId\", tabId);\r\n                        pushIf(sb, \"sectionId\", sectionId);\r\n                        pushIf(sb, \"pageRecordId\", options.pageRecordId);\r\n                        pushIf(sb, \"recordId\", options.contextRecordId);\r\n                        pushIf(sb, \"userSettingsPath\", options.userSettingsPath);\r\n                        pushIf(sb, \"saveUserSettings\", \"true\", !!options.saveUserSettings);\r\n                        pushIf(sb, \"cancelId\", options.cancelId);\r\n\r\n                        url = sb.join(\"\");\r\n\r\n                        return url;\r\n                    },\r\n\r\n                    /**\r\n                     * @return {String}\r\n                     */\r\n                    buildPageSectionListBuilderResultsUrl: function (pageId, tabId, sectionId, queryViewId, options) {\r\n                        var sb,\r\n                            svc = this,\r\n                            url;\r\n\r\n                        sb = [buildBaseUrl(svc, \"WebShellListBuilderService.ashx\") +\r\n                            \"&queryViewId=\" + euc(queryViewId) +\r\n                            \"&returnResults=true\"];\r\n\r\n                        options = options || {};\r\n\r\n                        pushIf(sb, \"returnFormattedValues\", \"true\", options.returnFormattedValues);\r\n                        pushIf(sb, \"parameterFormSessionId\", options.parameterFormSessionId);\r\n                        pushIf(sb, \"pageId\", pageId);\r\n                        pushIf(sb, \"tabId\", tabId);\r\n                        pushIf(sb, \"sectionId\", sectionId);\r\n                        pushIf(sb, \"pageRecordId\", options.pageRecordId);\r\n                        pushIf(sb, \"recordId\", options.contextRecordId);\r\n                        pushIf(sb, \"userSettingsPath\", options.userSettingsPath);\r\n                        pushIf(sb, \"saveUserSettings\", \"true\", !!options.saveUserSettings);\r\n                        pushIf(sb, \"moreRowsRangeKey\", options.moreRowsRangeKey);\r\n                        pushIf(sb, \"previousRowCount\", options.previousRowCount);\r\n                        pushIf(sb, \"cancelId\", options.cancelId);\r\n                        pushIf(sb, \"storeSettingsByContextRecordId\", options.storeSettingsByContextRecordId);\r\n\r\n                        url = sb.join(\"\");\r\n\r\n                        return url;\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    listBuilderClearCachedResults: function (moreRowsRangeKey) {\r\n                        var url,\r\n                            svc = this;\r\n\r\n                        url = buildBaseUrl(svc, \"WebShellListBuilderService.ashx\") +\r\n                            \"&moreRowsRangeKey=\" + euc(moreRowsRangeKey) +\r\n                            \"&discardRows=true\";\r\n\r\n                        return doGet(svc, url);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    pageSectionDataListLoad: function (pageId, tabId, sectionId, dataListId, options) {\r\n                        var url;\r\n\r\n                        url = this.buildPageSectionDataListResultsUrl(pageId, tabId, sectionId, dataListId, options);\r\n\r\n                        return doGet(this, url);\r\n                    },\r\n\r\n                    /**\r\n                     * Gets the prompt to be displayed before the specified record operation is performed and passes the\r\n                     * {@link BBUI.webshell.servicecontracts.RecordOperationPrompt reply object} to the promise.\r\n                     *\r\n                     * @param {String} recordOperationId\r\n                     * The ID of the record operation.\r\n                     *\r\n                     * @param {String} [recordId]\r\n                     * The ID of the context record for the record operation.\r\n                     *\r\n                     * @return {promise}\r\n                     */\r\n                    recordOperationGetPrompt: function (recordOperationId, recordId) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"recordOperationGetPrompt\") +\r\n                            \"&recordOperationId=\" +\r\n                            euc(recordOperationId);\r\n\r\n                        if (recordId) {\r\n                            url += \"&recordId=\" + euc(recordId);\r\n                        }\r\n\r\n                        return doGet(this, url);\r\n                    },\r\n\r\n                    /**\r\n                     * Performs a record operation.\r\n                     *\r\n                     * @param {String} recordOperationId\r\n                     * The ID of the record operation.\r\n                     *\r\n                     * @param {String} [recordId]\r\n                     * The ID of the context record for the record operation.\r\n                     *\r\n                     * @param {Object} [options]\r\n                     *\r\n                     * @param {Object[]} options.parameters\r\n                     * An array of objects containing <tt>name</tt> and <tt>value</tt> properties used to to pass as parameters to the record operation.\r\n                     * @param {String} options.parameters.name\r\n                     * @param {Object} options.parameters.value\r\n                     *\r\n                     * @return {promise}\r\n                     */\r\n                    recordOperationPerform: function (recordOperationId, recordId, options) {\r\n                        var url,\r\n                            sb,\r\n                            data;\r\n\r\n                        if (options && (options.parameters || options.recordIds)) {\r\n                            data = {};\r\n\r\n                            if (options.parameters) {\r\n                                data.values = options.parameters;\r\n                            }\r\n\r\n                            if (options.recordIds) {\r\n                                data.recordIds = options.recordIds;\r\n                            }\r\n                        }\r\n\r\n                        sb = [buildSvcBaseUrl(this, \"recordOperationPerform\")];\r\n\r\n                        pushIf(sb, \"recordOperationId\", recordOperationId);\r\n                        pushIf(sb, \"recordId\", recordId);\r\n\r\n                        url = sb.join(\"\");\r\n\r\n                        return doPost(this, url, data);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    searchListGetOutputDefinition: function (searchListId) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"searchListGetOutputDefinition\") +\r\n                            \"&searchListId=\" +\r\n                            euc(searchListId);\r\n\r\n                        return doGet(this, url);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    searchListQuickFind: function (searchListId, criteria, options) {\r\n                        var url;\r\n\r\n                        url = buildSearchListSvcBaseUrl(this, searchListId, criteria);\r\n\r\n                        if (options) {\r\n                            if (options.onlyReturnRows) {\r\n                                url += \"&onlyReturnRows=true\";\r\n                            }\r\n                            if (options.maxRecords) {\r\n                                url += \"&maxRecords=\" + euc(options.maxRecords);\r\n                            }\r\n                        }\r\n\r\n                        return doGet(this, url);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    codeTableEntrySave: function (codeTableName, codeTableEntryId, request) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"codeTableEntrySave\") +\r\n                            \"&codeTableName=\" +\r\n                            euc(codeTableName) +\r\n                            \"&codeTableEntryId=\" +\r\n                            euc(codeTableEntryId);\r\n\r\n                        return doPost(this, url, request);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    kpiDashboardGetDefinition: function (options) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"kpiDashboardGetDefinition\");\r\n\r\n                        if (options.returnValues) {\r\n                            url += \"&returnValues=true\";\r\n                        }\r\n\r\n                        return doGet(this, url);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    queryViewGetFieldFindResults: function (request) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"queryViewGetFieldFindResults\");\r\n\r\n                        return doPost(this, url, request);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    queryViewGetTree: function (id, options) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"queryViewGetTree\") +\r\n                            \"&id=\" +\r\n                            euc(id);\r\n\r\n                        if (options && options.forExport === true) {\r\n                            url += \"&loadExportDefinitionViews=true\";\r\n                        } else {\r\n                            url += \"&loadExportDefinitionViews=false\";\r\n                        }\r\n\r\n                        if (options && options.forReportModelGenerator === true) {\r\n                            url += \"&reportModelViewsOnly=true\";\r\n                        } else {\r\n                            url += \"&reportModelViewsOnly=false\";\r\n                        }\r\n\r\n                        return doGet(this, url);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    queryViewGetMetaData: function (id) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"queryViewGetMetaData\") +\r\n                            \"&id=\" +\r\n                            euc(id);\r\n\r\n                        return doGet(this, url);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    queryViewGetTreeNodeFields: function (node, options) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"queryViewGetTreeNodeFields\") +\r\n                            \"&node=\" +\r\n                            euc(node);\r\n\r\n                        if (options && options.forReportModelGenerator === true) {\r\n                            url += \"&reportModelViewsOnly=true\";\r\n                        } else {\r\n                            url += \"&reportModelViewsOnly=false\";\r\n                        }\r\n\r\n                        return doGet(this, url);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {String}\r\n                     */\r\n                    buildQueryViewGetTreeNodeChildrenUrl: function (queryViewId, forExport, forReportModelGenerator) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"queryViewGetTreeNodeChildren\");\r\n\r\n                        if (BBUI.is(forExport) && forExport === true) {\r\n                            url += \"&loadExportDefinitionViews=true\";\r\n                        } else {\r\n                            url += \"&loadExportDefinitionViews=false\";\r\n                        }\r\n\r\n                        if (BBUI.is(forReportModelGenerator) && forReportModelGenerator === true) {\r\n                            url += \"&reportModelViewsOnly=true\";\r\n                        } else {\r\n                            url += \"&reportModelViewsOnly=false\";\r\n                        }\r\n\r\n                        return url;\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    adHocQueryProcess: function (request, options) {\r\n                        //var cancelCallback,\r\n                        //    requestObj,\r\n                        //    scope,\r\n                        //    state,\r\n                        var svc,\r\n                            url;\r\n\r\n                        // TODO implement cancellation.\r\n                        // See http://stackoverflow.com/questions/13928057/how-to-cancel-an-http-request-in-angularjs\r\n                        //function cancelAdHocQueryProcess() {\r\n                        //}\r\n\r\n                        svc = this;\r\n\r\n                        url = buildAdHocQuerySvcBaseUrl(svc);\r\n\r\n                        if (options) {\r\n                            if (options.returnFormattedValues) {\r\n                                url += \"&returnFormattedValues=true\";\r\n                            }\r\n                            if (options.cancelId) {\r\n                                url += \"&cancelId=\" + options.cancelId;\r\n                            }\r\n                        }\r\n\r\n                        return doPost(svc, url, request);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    adHocQueryGetResults: function (request, options) {\r\n                        var url;\r\n\r\n                        url = buildAdHocQuerySvcBaseUrl(this);\r\n\r\n                        if (options) {\r\n                            if (options.returnFormattedValues) {\r\n                                url += \"&returnFormattedValues=true\" + \"&getResults=true\";\r\n                            }\r\n                            if (options.cancelId) {\r\n                                url += \"&cancelId=\" + euc(options.cancelId);\r\n                            }\r\n                        }\r\n\r\n                        return doPost(this, url, request);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    cancelAsyncOperation: function (cancelId) {\r\n                        var url;\r\n\r\n                        url = buildBaseUrl(this, \"WebShellCancelAsyncOperation.ashx\") +\r\n                            \"&cancelId=\" +\r\n                            euc(cancelId);\r\n\r\n                        return doGet(this, url);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {String}\r\n                     */\r\n                    buildAdHocQueryExportUrl: function (options) {\r\n                        var url;\r\n\r\n                        options = options || {};\r\n\r\n                        url = [];\r\n                        url.push(buildAdHocQuerySvcBaseUrl(this));\r\n                        url.push(\"&forExport=true\");\r\n\r\n                        pushIf(url, \"getResults\", \"true\", !!options.getResults);\r\n                        pushIf(url, \"queryViewId\", options.queryViewId);\r\n\r\n                        return url.join(\"\");\r\n                    },\r\n\r\n                    /**\r\n                     * @return {String}\r\n                     */\r\n                    buildListBuilderExportUrl: function (options) {\r\n                        var url;\r\n\r\n                        options = options || {};\r\n\r\n                        url = [];\r\n                        url.push(buildBaseUrl(this, \"WebShellListBuilderService.ashx\"));\r\n                        url.push(\"&forExport=true\");\r\n\r\n                        pushIf(url, \"queryViewId\", options.queryViewId);\r\n                        pushIf(url, \"suppressPrimaryKeyField\", \"true\", !!options.suppressPrimaryKeyField);\r\n                        pushIf(url, \"searchText\", options.searchText);\r\n                        pushIf(url, \"parameterFormSessionId\", options.parameterFormSessionId);\r\n\r\n                        return url.join(\"\");\r\n                    },\r\n\r\n                    /**\r\n                     * @return {String}\r\n                     */\r\n                    buildAdHocQueryListExportUrl: function (options) {\r\n                        var url;\r\n\r\n                        options = options || {};\r\n\r\n                        url = [];\r\n                        url.push(buildBaseUrl(this, \"WebShellAdHocQueryListService.ashx\"));\r\n                        url.push(\"&forExport=true\");\r\n\r\n                        pushIf(url, \"adHocQueryId\", options.adHocQueryId);\r\n                        pushIf(url, \"queryViewId\", options.queryViewId);\r\n                        pushIf(url, \"suppressPrimaryKeyField\", \"true\", !!options.suppressPrimaryKeyField);\r\n                        pushIf(url, \"searchText\", options.searchText);\r\n                        pushIf(url, \"parameterFormSessionId\", options.parameterFormSessionId);\r\n\r\n                        return url.join(\"\");\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    adHocQuerySave: function (request) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"adHocQuerySave\");\r\n\r\n                        return doPost(this, url, request);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    adHocQuerySaveDataList: function (request) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"adHocQuerySaveDataList\");\r\n\r\n                        return doPost(this, url, request);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    adHocQuerySaveReport: function (request) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"adHocQuerySaveReport\");\r\n\r\n                        return doPost(this, url, request);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    adHocQuerySaveSmartQuery: function (request) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"adHocQuerySaveSmartQuery\");\r\n\r\n                        return doPost(this, url, request);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    adHocQueryGetDefinition: function (id, options) {\r\n                        var definitionType = options.definitionType,\r\n                            throwOnInvalidFields = options.throwOnInvalidFields,\r\n                            url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"adHocQueryGetDefinition\") +\r\n                            \"&id=\" +\r\n                            euc(id);\r\n\r\n                        if (!BBUI.is(definitionType)) {\r\n                            definitionType = 0; //ad-hoc query\r\n                        }\r\n\r\n                        url += \"&definitionType=\" + euc(definitionType);\r\n\r\n                        if (BBUI.is(throwOnInvalidFields)) {\r\n                            url += \"&throwOnInvalidFields=\" + euc(throwOnInvalidFields);\r\n                        }\r\n\r\n                        return doGet(this, url);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    adHocQueryDelete: function (id) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"adHocQueryDelete\") +\r\n                            \"&id=\" +\r\n                            euc(id);\r\n\r\n                        return doPost(this, url, null);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    exportDefinitionSave: function (request) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"exportDefinitionSave\");\r\n\r\n                        return doPost(this, url, request);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    exportDefinitionGetDefinition: function (id) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"exportDefinitionGetDefinition\") +\r\n                            \"&id=\" +\r\n                            euc(id);\r\n\r\n                        return doGet(this, url);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    smartQueryProcess: function (request, options) {\r\n                        //var cancelCallback,\r\n                        //    requestObj,\r\n                        //    scope,\r\n                        //    state,\r\n                        var svc,\r\n                            url;\r\n\r\n                        // TODO implement cancellation.\r\n                        // See http://stackoverflow.com/questions/13928057/how-to-cancel-an-http-request-in-angularjs\r\n                        //function cancelSmartQueryProcess() {\r\n                        //}\r\n\r\n                        svc = this;\r\n\r\n                        url = buildBaseUrl(svc, \"WebShellSmartQueryService.ashx\");\r\n\r\n                        if (options) {\r\n                            if (options.returnFormattedValues) {\r\n                                url += \"&returnFormattedValues=true\";\r\n                            }\r\n                            if (options.cancelId) {\r\n                                url += \"&cancelId=\" + euc(options.cancelId);\r\n                            }\r\n                        }\r\n\r\n                        return doPost(svc, url, request);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    smartQueryGetResults: function (request, options) {\r\n                        var url;\r\n\r\n                        url = buildBaseUrl(this, \"WebShellSmartQueryService.ashx\");\r\n\r\n                        if (options) {\r\n                            if (options.returnFormattedValues) {\r\n                                url += \"&returnFormattedValues=true\" + \"&getResults=true\";\r\n                            }\r\n                            if (options.cancelId) {\r\n                                url += \"&cancelId=\" + euc(options.cancelId);\r\n                            }\r\n                        }\r\n\r\n                        return doPost(this, url, request);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {String}\r\n                     */\r\n                    buildSmartQueryExportUrl: function (options) {\r\n                        var url;\r\n\r\n                        url = [];\r\n                        url.push(buildBaseUrl(this, \"WebShellSmartQueryService.ashx\"));\r\n                        url.push(\"&forExport=true\");\r\n\r\n                        if (options && options.getResults) {\r\n                            url.push(\"&getResults=true\");\r\n                        }\r\n\r\n                        return url.join(\"\");\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    userGetFunctionalAreaHistory: function (functionalAreaId, options) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"userGetFunctionalAreaHistory\") +\r\n                            \"&functionalAreaId=\" +\r\n                            euc(functionalAreaId);\r\n\r\n                        if (options) {\r\n                            if (options.folderPath) {\r\n                                url += \"&folderPath=\" +\r\n                                    euc(options.folderPath);\r\n                            }\r\n\r\n                            if (options.includeSearchTasks) {\r\n                                url += \"&includeSearchTasks=true\";\r\n                            }\r\n\r\n                            if (options.includeShortcuts) {\r\n                                url += \"&includeShortcuts=true\";\r\n                            }\r\n\r\n                            if (!options.skipMru) {\r\n                                url += \"&includeMru=true\";\r\n                            }\r\n                        }\r\n\r\n                        return doGet(this, url);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    userUpdateDataFormSettings: function (formSessionId, userSettingsPath) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"userUpdateDataFormSettings\") +\r\n                            \"&formSessionId=\" +\r\n                            euc(formSessionId) +\r\n                            \"&userSettingsPath=\" +\r\n                            euc(userSettingsPath);\r\n\r\n                        return doPost(this, url, null);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    userUpdateSelectedPervasiveSearchTask: function (pervasiveSearchTaskId) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"userUpdateSelectedPervasiveSearchTask\");\r\n\r\n                        if (pervasiveSearchTaskId) {\r\n                            url += \"&pervasiveSearchTaskId=\" + euc(pervasiveSearchTaskId);\r\n                        }\r\n\r\n                        return doPost(this, url, null);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    userUpdateShortcuts: function (request, options) {\r\n                        var url;\r\n\r\n                        options = options || {};\r\n\r\n                        url = buildSvcBaseUrl(this, \"userUpdateShortcuts\");\r\n\r\n                        if (options.remove) {\r\n                            url += \"&remove=\" + euc(options.remove);\r\n                        }\r\n\r\n                        if (options.replace) {\r\n                            url += \"&replace=\" + euc(options.replace);\r\n                        }\r\n\r\n                        return doPost(this, url, request);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    userUpdatePageActionGroupSettings: function (pageId, actionGroups) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"userUpdatePageActionGroupSettings\") +\r\n                            \"&pageId=\" +\r\n                            euc(pageId);\r\n\r\n                        return doPost(this, url, actionGroups);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    userUpdateFunctionalAreaActionGroupSettings: function (functionalAreaId, actionGroups) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"userUpdateFunctionalAreaActionGroupSettings\") +\r\n                            \"&functionalAreaId=\" +\r\n                            euc(functionalAreaId);\r\n\r\n                        return doPost(this, url, actionGroups);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    userUpdatePageDataListSettings: function (pageId, sectionId, dataListId, settings) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"userUpdatePageDataListSettings\", pageId, null, sectionId) +\r\n                            \"&dataListId=\" +\r\n                            euc(dataListId);\r\n\r\n                        return doPost(this, url, settings);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    userUpdatePageListBuilderSettings: function (queryViewId, userSettingsPath, settings, options) {\r\n                        var url;\r\n\r\n                        options = options || {};\r\n\r\n                        url = buildSvcBaseUrl(this, \"userUpdatePageListBuilderSettings\") +\r\n                            \"&queryViewId=\" +\r\n                            euc(queryViewId) +\r\n                            \"&userSettingsPath=\" +\r\n                            euc(userSettingsPath);\r\n\r\n                        if (options.storeSettingsByContextRecordId) {\r\n                            url += \"&storeSettingsByContextRecordId=true\";\r\n\r\n                            if (options.contextRecordId) {\r\n                                url += \"&contextRecordId=\" + euc(options.contextRecordId);\r\n                            }\r\n                        }\r\n\r\n                        return doPost(this, url, settings);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    userUpdateAdHocQueryListBuilderSettings: function (queryViewId, adHocQueryId, userSettingsPath, settings) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"userUpdatePageListBuilderSettings\") +\r\n                            \"&queryViewId=\" +\r\n                            euc(queryViewId) +\r\n                            \"&adHocQueryId=\" +\r\n                            euc(adHocQueryId) +\r\n                            \"&userSettingsPath=\" +\r\n                            euc(userSettingsPath);\r\n\r\n                        return doPost(this, url, settings);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    userUpdatePageSectionSettings: function (pageId, sections) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"userUpdatePageSectionSettings\") +\r\n                            \"&pageId=\" +\r\n                            euc(pageId);\r\n\r\n                        return doPost(this, url, sections);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    userUpdatePageTabSettings: function (pageId, tabs) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"userUpdatePageTabSettings\") +\r\n                            \"&pageId=\" +\r\n                            euc(pageId);\r\n\r\n                        return doPost(this, url, tabs);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    userSetFeatureTipSeen: function (featureTipId, tipSeen) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"userSetFeatureTipSeen\");\r\n\r\n                        return doPost(this, url, {featureTipId: featureTipId, tipSeen: tipSeen});\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    userGetFeatureTipSeen: function (featureTipId, setTipAsSeen) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"userGetFeatureTipSeen\");\r\n\r\n                        return doPost(this, url, {featureTipId: featureTipId, setTipAsSeen: setTipAsSeen});\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    userUpdateSearchListGridSettings: function (searchlistid, gridSettings) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"userUpdateSearchListGridSettings\") +\r\n                            \"&searchlistid=\" +\r\n                            euc(searchlistid);\r\n\r\n                        return doPost(this, url, gridSettings);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    userGetSearchListGridSettings: function (searchlistid) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"userGetSearchListGridSettings\") +\r\n                            \"&searchlistid=\" +\r\n                            euc(searchlistid);\r\n\r\n                        return doGet(this, url);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    userUpdateActionPanelSettings: function (settings) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"userUpdateActionPanelSettings\");\r\n\r\n                        return doPost(this, url, settings);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    featureSearch: function (criteria, onlyRssFeeds) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"featureSearch\") +\r\n                            \"&criteria=\" +\r\n                            euc(criteria);\r\n\r\n                        if (onlyRssFeeds) {\r\n                            url += \"&onlyRssFeeds=true\";\r\n                        }\r\n\r\n                        return doGet(this, url);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {String}\r\n                     */\r\n                    buildRssFeedUrl: function (dataListId, contextRecordId) {\r\n                        var url;\r\n\r\n                        url = BBUI.urlConcat(this.baseUrl, \"rssfeed.ashx?WebShell=true&DBName=\" +\r\n                            euc(this.databaseName) +\r\n                            \"&DataListID=\" +\r\n                            euc(dataListId));\r\n\r\n                        if (contextRecordId) {\r\n                            url += \"&ContextRecordID=\" + contextRecordId;\r\n                        }\r\n\r\n                        return url;\r\n                    },\r\n\r\n                    /**\r\n                     * Loads a data form from the server and passes the {@link BBUI.webshell.servicecontracts.DataFormLoadReply reply object} to the promise.\r\n                     *\r\n                     * @param {String} dataFormInstanceId\r\n                     * The ID of the data form instance to load.\r\n                     *\r\n                     * @param {Object} [options]\r\n                     *\r\n                     * @param {String} [options.recordId]\r\n                     * The ID of the record for the data form.\r\n                     *\r\n                     * @param {String} [options.contextRecordId]\r\n                     * The ID of the record that provides context for the data form.\r\n                     *\r\n                     * @return {promise}\r\n                     */\r\n                    dataFormLoad: function (dataFormInstanceId, options) {\r\n                        var url;\r\n\r\n                        options = options || {};\r\n\r\n                        url = buildSvcBaseUrl(this, \"dataFormLoad\") +\r\n                            \"&dataFormInstanceId=\" +\r\n                            euc(dataFormInstanceId);\r\n\r\n                        if (options.recordId) {\r\n                            url += \"&recordId=\" + euc(options.recordId);\r\n                        }\r\n\r\n                        if (options.contextRecordId) {\r\n                            url += \"&contextRecordId=\" + euc(options.contextRecordId);\r\n                        }\r\n\r\n                        url = addSecurityContext(url, options);\r\n\r\n                        return doGet(this, url);\r\n                    },\r\n\r\n                    /**\r\n                     * Saves a data form on the server and passes the {@link BBUI.webshell.servicecontracts.DataFormSaveReply reply object} to the promise.\r\n                     *\r\n                     * <pre><code>\r\nvar svc = bbuiShellService.create(),\r\n    constituentsValueCollection;\r\n\r\nif (constituents && constituents.length) {\r\n    constituentsValueCollection = [];\r\n    constituents.forEach(function (constituent) {\r\n        constituentsValueCollection.push([\r\n            {\r\n                name: \"CONSTITUENTID\",\r\n                value: constituent.id\r\n            },\r\n            {\r\n                name: \"DISPLAYNAME\",\r\n                value: constituent.displayName\r\n            }\r\n        ]);\r\n    });\r\n}\r\n\r\nsvc.dataFormSave(\r\n    MYFORM_ADD_ID,\r\n    {\r\n        contextRecordId: myContextRecordId,\r\n        values: [\r\n            {\r\n                name: \"FIELD1\",\r\n                value: field1Value\r\n            },\r\n            {\r\n                name: \"FIELD2\",\r\n                value: field2Value\r\n            },\r\n            {\r\n                name: \"CONSTITUENTS\",\r\n                collectionValue: constituentsValueCollection\r\n            }\r\n        ]\r\n    }\r\n).then(function (reply) {\r\n    console.log(\"Record was created: \" + reply.data.id);\r\n}, function (reply) {\r\n    console.err(\"Data form save error: \" + reply.data.message);\r\n})\r\n.finally(function () {\r\n});\r\n                     * </code></pre>\r\n                     *\r\n                     *\r\n                     * @param {String} dataFormInstanceId The ID of the data form instance to load.\r\n                     *\r\n                     * @param {Object} [options]\r\n                     *\r\n                     * @param {String} [options.recordId]\r\n                     * The ID of the record for the data form.\r\n                     *\r\n                     * @param {String} [options.contextRecordId]\r\n                     * The ID of the record that provides context for the data form.\r\n                     *\r\n                     * @param {BBUI.uimodeling.restservices.contracts.FieldValue[]} [options.values]\r\n                     * Any form field default values for the form.\r\n                     *\r\n                     * @param {String} [options.securityContextFeatureId]\r\n                     *\r\n                     * @param {String} [options.securityContextFeatureType]\r\n                     *\r\n                     * @return {promise}\r\n                     */\r\n                    dataFormSave: function (dataFormInstanceId, options) {\r\n                        var url,\r\n                            data;\r\n\r\n                        options = options || {};\r\n\r\n                        data = {};\r\n\r\n                        url = buildSvcBaseUrl(this, \"dataFormSave\") +\r\n                            \"&dataFormInstanceId=\" +\r\n                            euc(dataFormInstanceId);\r\n\r\n                        if (options.recordId) {\r\n                            url += \"&recordId=\" + euc(options.recordId);\r\n                        }\r\n\r\n                        if (options.contextRecordId) {\r\n                            url += \"&contextRecordId=\" + euc(options.contextRecordId);\r\n                        }\r\n\r\n                        url = addSecurityContext(url, options);\r\n\r\n                        if (options.values) {\r\n                            data.values = options.values;\r\n                        }\r\n\r\n                        return doPost(this, url, data);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    taskWizardGetDefinition: function (taskWizardId) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"taskwizardgetdefinition\") +\r\n                            \"&taskWizardId=\" +\r\n                            euc(taskWizardId);\r\n\r\n                        return doGet(this, url);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    taskWizardGetTaskStatus: function (taskId) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"taskwizardgettaskstatus\") +\r\n                            \"&taskId=\" +\r\n                            euc(taskId);\r\n\r\n                        return doGet(this, url);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {String}\r\n                     */\r\n                    buildReportExportUrl: function (reportId, historyId, exportType, deviceInfo, dataFormItemKey, fileName) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"exportReport\") +\r\n                            \"&reportId=\" + euc(reportId);\r\n\r\n                        if (historyId) {\r\n                            url += \"&historyId=\" + euc(historyId);\r\n                        }\r\n\r\n                        if (!BBUI.is(exportType)) {\r\n                            exportType = 2;\r\n                        }\r\n\r\n                        url += \"&exportType=\" + euc(exportType);\r\n\r\n                        if (deviceInfo) {\r\n                            url += \"&deviceInfo=\" + euc(deviceInfo);\r\n                        }\r\n\r\n                        if (dataFormItemKey) {\r\n                            url += \"&dataFormItemKey=\" + euc(dataFormItemKey);\r\n                        }\r\n\r\n                        if (fileName) {\r\n                            url += \"&fileName=\" + euc(fileName);\r\n                        }\r\n\r\n                        return url;\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    cacheDataFormItem: function (values) {\r\n                        var url,\r\n                            data;\r\n\r\n                        if (values) {\r\n                            data = {\r\n                                values: values\r\n                            };\r\n                        }\r\n\r\n                        url = buildSvcBaseUrl(this, \"cacheDataFormItem\");\r\n\r\n                        return doPost(this, url, data);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    idMap: function (idMapperId, sourceId) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"idMap\") +\r\n                            \"&idMapperId=\" + euc(idMapperId);\r\n\r\n                        if (sourceId) {\r\n                            url += \"&sourceId=\" + euc(sourceId);\r\n                        }\r\n\r\n                        return doGet(this, url);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    securityUserGrantedFeature: function (id, featureType) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"securityUserGrantedFeature\") +\r\n                            \"&id=\" + euc(id) +\r\n                            \"&featureType=\" + euc(featureType);\r\n\r\n                        return doGet(this, url);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    loadCatalogItem: function (sourceType, sourceName, itemResourceName) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"loadCatalogItem\") +\r\n                            \"&sourceType=\" + euc(sourceType) +\r\n                            \"&sourceName=\" + euc(sourceName) +\r\n                            \"&itemResourceName=\" + euc(itemResourceName);\r\n\r\n                        return doPost(this, url, null);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    getPageHelpKey: function (pageId, tabId, sectionId, recordId) {\r\n                        var url;\r\n\r\n                        url = buildSvcBaseUrl(this, \"getPageHelpkey\", pageId, tabId, sectionId, null, recordId);\r\n\r\n                        return doGet(this, url);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {String}\r\n                     */\r\n                    buildSvcBaseUrl: function (action) {\r\n                        return buildSvcBaseUrl(this, action);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    doGet: function (url) {\r\n                        return doRequest(this, \"GET\", url, null);\r\n                    },\r\n\r\n                    /**\r\n                     * @return {promise}\r\n                     */\r\n                    doPost: function (url, data) {\r\n                        return doRequest(this, \"POST\", url, data);\r\n                    }\r\n                };\r\n\r\n            }());\r\n\r\n            /**\r\n             * @class bbui.shellservice.bbuiShellService\r\n             */\r\n            return {\r\n                /**\r\n                 *\r\n                 * @return {bbui.shellservice.bbuiShellService.Service}\r\n                 */\r\n                create: function (baseUrl, databaseName, options) {\r\n                    var svc;\r\n\r\n                    baseUrl = baseUrl || bbuiShellServiceConfig.baseUrl;\r\n                    databaseName = databaseName || bbuiShellServiceConfig.databaseName;\r\n\r\n                    if (baseUrl === null || !databaseName) {\r\n                        throw new Error('You must either provide a baseUrl and databaseName as parameters or set them globally using bbuiShellServiceConfig.');\r\n                    }\r\n\r\n                    svc = new Service(baseUrl, databaseName, options);\r\n                    svc.$http = $http;\r\n\r\n                    return svc;\r\n                }\r\n            };\r\n        }]);\r\n}());\r\n",
    "/*global angular */\r\n\r\n(function () {\r\n    \"use strict\";\r\n\r\n    angular.module('bbui.uimodelingservice', [])\r\n        /**\r\n         * @class bbui.uimodelingservice.bbuiUIModelingServiceConfig\r\n         *\r\n         * Configuration for {@link bbui.uimodelingservice.bbuiUIModelingService bbuiUIModelingService}.\r\n         */\r\n        .constant('bbuiUIModelingServiceConfig', {\r\n            /**\r\n             * @cfg {String} baseUrl\r\n             */\r\n            baseUrl: null,\r\n            /**\r\n             * @cfg {String} databaseName\r\n             */\r\n            databaseName: null\r\n        })\r\n        .factory('bbuiUIModelingService', ['$http', 'bbui', 'bbuiUIModelingServiceConfig', function ($http, BBUI, bbuiUIModelingServiceConfig) {\r\n            var euc,\r\n                formSessionServerIds,\r\n                formSessionServerIdsBufferPos,\r\n                formSessionServerIdsBufferSize,\r\n                Service;\r\n\r\n            // Since this is called many times in this file, create a shorter alias for it.\r\n            euc = encodeURIComponent;\r\n\r\n            formSessionServerIds = [];\r\n            formSessionServerIdsBufferPos = 0;\r\n            formSessionServerIdsBufferSize = 100;\r\n\r\n            function buildSvcBaseUrl(svc, action, formSessionId, modelInstanceId, fieldId) {\r\n                var url;\r\n\r\n                url =\r\n                    BBUI.urlConcat(svc.baseUrl, \"uimodel/UIModelingService.ashx?action=\") +\r\n                    action +\r\n                    \"&databaseName=\" + euc(svc.databaseName);\r\n\r\n                if (svc.runAs) {\r\n                    url += \"&runAs=\" + euc(svc.runAs);\r\n                }\r\n\r\n                if (formSessionId) {\r\n                    url += \"&formSessionId=\" + euc(formSessionId);\r\n                }\r\n\r\n                if (modelInstanceId) {\r\n                    url += \"&modelInstanceId=\" + euc(modelInstanceId);\r\n                }\r\n\r\n                if (fieldId) {\r\n                    url += \"&fieldId=\" + euc(fieldId);\r\n                }\r\n\r\n                return url;\r\n            }\r\n\r\n            function doRequest(svc, method, url, data) {\r\n                return svc.$http({\r\n                    method: method,\r\n                    url: url,\r\n                    data: data,\r\n                    cache: false\r\n                });\r\n            }\r\n\r\n            function doGet(svc, url) {\r\n                return doRequest(svc, \"GET\", url, null);\r\n            }\r\n\r\n            function doPost(svc, url, data) {\r\n                return doRequest(svc, \"POST\", url, data);\r\n            }\r\n\r\n            /**\r\n             * @private\r\n             *\r\n             * @param {String} url\r\n             *\r\n             * @param {Object} [options]\r\n             *\r\n             * @param {String} [options.recordId]\r\n             *\r\n             * @param {String} [options.contextRecordId]\r\n             *\r\n             * @param {String} [options.uiWidgetDashboardSystemId]\r\n             *\r\n             * @param {String} [options.uiWidgetDashboardWidgetId]\r\n             *\r\n             * @param {String} [options.userSettingsPath]\r\n             *\r\n             * @return {String}\r\n             * The URL with query string parameters appended.\r\n             */\r\n            function addOptionalFormSessionArgs(url, options) {\r\n\r\n                if (options) {\r\n                    if (options.recordId) {\r\n                        url += \"&recordId=\" + euc(options.recordId);\r\n                    }\r\n\r\n                    if (options.contextRecordId) {\r\n                        url += \"&contextRecordId=\" + euc(options.contextRecordId);\r\n                    }\r\n\r\n                    if (options.uiWidgetDashboardSystemId) {\r\n                        url += \"&uiWidgetDashboardSystemId=\" + euc(options.uiWidgetDashboardSystemId);\r\n                    }\r\n\r\n                    if (options.uiWidgetDashboardWidgetId) {\r\n                        url += \"&uiWidgetDashboardWidgetId=\" + euc(options.uiWidgetDashboardWidgetId);\r\n                    }\r\n\r\n                    if (options.userSettingsPath) {\r\n                        url += \"&userSettingsPath=\" + euc(options.userSettingsPath);\r\n                    }\r\n                }\r\n\r\n                return url;\r\n            }\r\n\r\n            /**\r\n             * @class bbui.uimodelingservice.bbuiUIModelingService.Service\r\n             * Provides various methods for communicating changes to a UI model to the web server.\r\n             *\r\n             * @param {String} baseUrl\r\n             * The base URL to the web server.\r\n             *\r\n             * @param {String} databaseName\r\n             * The name of the database to which to connect.\r\n             *\r\n             * @param {Object} [options]\r\n             *\r\n             * @param {Object} options.runAs\r\n             *\r\n             * @param {Object} options.onRequestBegin\r\n             *\r\n             * @param {Object} options.onRequestEnd\r\n             *\r\n             * @param {Object} options.httpHeaders\r\n             *\r\n             * @param {Object} options.useEventQueue\r\n             *\r\n             */\r\n            Service = function (baseUrl, databaseName, options) {\r\n\r\n                var svc,\r\n                    useEventQueue;\r\n\r\n                svc = this;\r\n\r\n                /**\r\n                 * @readonly\r\n                 * The base URL to the web server.\r\n                 * @property baseUrl\r\n                 * @type String\r\n                 */\r\n                svc.baseUrl = baseUrl;\r\n\r\n                /**\r\n                 * @readonly\r\n                 * The name of the database to which to connect.\r\n                 * @property databaseName\r\n                 * @type String\r\n                 */\r\n                svc.databaseName = databaseName;\r\n\r\n                if (options) {\r\n                    svc.runAs = options.runAs;\r\n                    svc.onRequestBegin = options.onRequestBegin;\r\n                    svc.onRequestEnd = options.onRequestEnd;\r\n                    svc.httpHeaders = options.httpHeaders;\r\n                    svc.useEventQueue = useEventQueue = BBUI.is(options.useEventQueue) ? options.useEventQueue : true;\r\n\r\n                    if (useEventQueue) {\r\n                        svc._formSessionQueue = {};\r\n                    }\r\n                }\r\n\r\n                /**\r\n                 * @property handlers\r\n                 * @type Object\r\n                 */\r\n                svc.handlers = {};\r\n            };\r\n\r\n            Service.prototype = {\r\n\r\n                /**\r\n                 */\r\n                on: function (evt, fn, scope, formSessionId) {\r\n                    var evtHandlers,\r\n                        handlers;\r\n\r\n                    handlers = this.handlers;\r\n\r\n                    evtHandlers = handlers[evt];\r\n\r\n                    if (!evtHandlers) {\r\n                        evtHandlers = handlers[evt] = [];\r\n                    }\r\n\r\n                    evtHandlers.push({\r\n                        fn: fn,\r\n                        formSessionId: formSessionId,\r\n                        scope: scope\r\n                    });\r\n                },\r\n\r\n                /**\r\n                 */\r\n                un: function (evt, fn, formSessionId) {\r\n                    var evtHandlers,\r\n                        i;\r\n\r\n                    evtHandlers = this.handlers[evt];\r\n\r\n                    if (evtHandlers) {\r\n                        i = evtHandlers.length;\r\n                        while (i--) {\r\n                            if (evtHandlers[i].fn === fn && evtHandlers[i].formSessionId === formSessionId) {\r\n                                evtHandlers.splice(i, 1);\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * Creates an instance of the form on the server.\r\n                 *\r\n                 * @param {String} assemblyName\r\n                 * The assembly name containing the UI model class.\r\n                 *\r\n                 * @param {String} className\r\n                 * The name of the UI model class.\r\n                 *\r\n                 * @param {BBUI.uimodeling.servicecontracts.CreateDataFormSessionArgs} [args]\r\n                 * Arguments to pass to the form session.\r\n                 *\r\n                 * @param {Object} [options]\r\n                 * An object literal that may contain any of the following properties:\r\n                 *\r\n                 * @param {String} [options.recordId]\r\n                 * The ID of the record being edited.\r\n                 *\r\n                 * @param {String} [options.contextRecordId]\r\n                 * The ID of the record that provides the context for the record being added or edited.\r\n                 *\r\n                 * @param {String} [options.uiWidgetDashboardSystemId]\r\n                 *\r\n                 * @param {String} [options.uiWidgetDashboardWidgetId]\r\n                 *\r\n                 * @param {String} [options.userSettingsPath]\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                createFormSession: function (assemblyName, className, args, options) {\r\n\r\n                    var url;\r\n\r\n                    options = options || {};\r\n\r\n                    url = buildSvcBaseUrl(this, \"createFormSession\") +\r\n                        \"&assemblyName=\" +\r\n                        euc(assemblyName) +\r\n                        \"&className=\" +\r\n                        euc(className);\r\n\r\n                    url = addOptionalFormSessionArgs(url, options);\r\n\r\n                    return doPost(this, url, args);\r\n                },\r\n\r\n                /**\r\n                 * Creates an instance of the form on the server.\r\n                 *\r\n                 * @param {String} mergeTaskId\r\n                 * The Id of the merge task.\r\n                 *\r\n                 * @param {BBUI.uimodeling.servicecontracts.CreateDataFormSessionArgs} [args]\r\n                 * Arguments to pass to the form session.\r\n                 *\r\n                 * @param {Object} [options]\r\n                 * An object literal that may contain any of the following properties:\r\n                 *\r\n                 * @param {String} [options.recordId]\r\n                 * The ID of the record being edited.\r\n                 *\r\n                 * @param {String} [options.contextRecordId]\r\n                 * The ID of the record that provides the context for the record being added or edited.\r\n                 *\r\n                 * @param {String} [options.uiWidgetDashboardSystemId]\r\n                 *\r\n                 * @param {String} [options.uiWidgetDashboardWidgetId]\r\n                 *\r\n                 * @param {String} [options.userSettingsPath]\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                createMergeTaskFormSession: function (mergeTaskId, args, options) {\r\n\r\n                    var url;\r\n\r\n                    options = options || {};\r\n\r\n                    url = buildSvcBaseUrl(this, \"createMergeTaskFormSession\") +\r\n                        \"&mergeTaskId=\" +\r\n                        euc(mergeTaskId);\r\n\r\n                    url = addOptionalFormSessionArgs(url, options);\r\n\r\n                    return doPost(this, url, args);\r\n                },\r\n\r\n                /**\r\n                 * Creates an instance of the form on the server.\r\n                 *\r\n                 * @param {String} dataFormInstanceId\r\n                 * The ID of the data form instance to interact with.\r\n                 *\r\n                 * @param {BBUI.uimodeling.servicecontracts.CreateDataFormSessionArgs} [args]\r\n                 * Arguments to pass to the form session.\r\n                 *\r\n                 * @param {Object} [options]\r\n                 * An object literal that may contain any of the following properties:\r\n                 *\r\n                 * @param {String} [options.recordId]\r\n                 * The ID of the record being edited.\r\n                 *\r\n                 * @param {String} [options.contextRecordId]\r\n                 * The ID of the record that provides the context for the record being added or edited.\r\n                 *\r\n                 * @param {String} [options.uiWidgetDashboardSystemId]\r\n                 *\r\n                 * @param {String} [options.uiWidgetDashboardWidgetId]\r\n                 *\r\n                 * @param {String} [options.userSettingsPath]\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                createDataFormSession: function (dataFormInstanceId, args, options) {\r\n\r\n                    var url;\r\n\r\n                    options = options || {};\r\n\r\n                    url = buildSvcBaseUrl(this, \"createDataFormSession\") +\r\n                        \"&dataFormInstanceId=\" +\r\n                        euc(dataFormInstanceId);\r\n\r\n                    url = addOptionalFormSessionArgs(url, options);\r\n\r\n                    return doPost(this, url, args);\r\n                },\r\n\r\n                /**\r\n                 * Creates an instance of the form on the server.\r\n                 *\r\n                 * @param {String} searchListId\r\n                 * The ID of the search list to interact with.\r\n                 *\r\n                 * @param {BBUI.uimodeling.servicecontracts.CreateSearchListFormSessionArgs} [args]\r\n                 * Arguments to pass to the search list session.\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                createSearchListSession: function (searchListId, args) {\r\n\r\n                    var url;\r\n\r\n                    url = buildSvcBaseUrl(this, \"createSearchListFormSession\") +\r\n                        \"&searchListId=\" +\r\n                        euc(searchListId);\r\n\r\n                    return doPost(this, url, args);\r\n                },\r\n\r\n                /**\r\n                 * Creates an instance of the data list's filter form on the server.\r\n                 *\r\n                 * @param {String} dataFormInstanceId\r\n                 * The ID of the data list to interact with.\r\n                 *\r\n                 * @param {BBUI.uimodeling.servicecontracts.CreateDataFormSessionArgs} [args]\r\n                 * Arguments to pass to the form session.\r\n                 *\r\n                 * @param {Object} [options]\r\n                 * An object literal that may contain any of the following properties:\r\n                 *\r\n                 * @param {String} [options.recordId]\r\n                 * The ID of the record being edited.\r\n                 *\r\n                 * @param {String} [options.contextRecordId]\r\n                 * The ID of the record that provides the context for the record being added or edited.\r\n                 *\r\n                 * @param {String} [options.uiWidgetDashboardSystemId]\r\n                 *\r\n                 * @param {String} [options.uiWidgetDashboardWidgetId]\r\n                 *\r\n                 * @param {String} [options.userSettingsPath]\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                createDataListFilterFormSession: function (dataListId, args, options) {\r\n\r\n                    var url;\r\n\r\n                    options = options || {};\r\n\r\n                    url = buildSvcBaseUrl(this, \"createDataListFilterFormSession\") +\r\n                        \"&dataListId=\" +\r\n                        euc(dataListId);\r\n\r\n                    url = addOptionalFormSessionArgs(url, options);\r\n\r\n                    return doPost(this, url, args);\r\n                },\r\n\r\n                /**\r\n                 * Creates an instance of the list builder filter form on the server.\r\n                 *\r\n                 * @param {String} queryViewId\r\n                 * The ID of the query view used to render the list.\r\n                 *\r\n                 * @param {BBUI.uimodeling.servicecontracts.CreateDataFormSessionArgs} [args]\r\n                 * Arguments to pass to the form session.\r\n                 *\r\n                 * @param {Object} [options]\r\n                 * An object literal that may contain any of the following properties:\r\n                 *\r\n                 * @param {String} [options.recordId]\r\n                 * The ID of the record being edited.\r\n                 *\r\n                 * @param {String} [options.contextRecordId]\r\n                 * The ID of the record that provides the context for the record being added or edited.\r\n                 *\r\n                 * @param {String} [options.uiWidgetDashboardSystemId]\r\n                 *\r\n                 * @param {String} [options.uiWidgetDashboardWidgetId]\r\n                 *\r\n                 * @param {String} [options.userSettingsPath]\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                createListBuilderFilterFormSession: function (queryViewId, args, options) {\r\n\r\n                    var url;\r\n\r\n                    options = options || {};\r\n\r\n                    url = buildSvcBaseUrl(this, \"createListBuilderFilterFormSession\") +\r\n                        \"&queryViewId=\" +\r\n                        euc(queryViewId);\r\n\r\n                    url = addOptionalFormSessionArgs(url, options);\r\n\r\n                    return doPost(this, url, args);\r\n                },\r\n\r\n                /**\r\n                 * Creates an instance of the report's parameter form on the server.\r\n                 *\r\n                 * @param {String} reportId\r\n                 * The ID of the report to interact with.\r\n                 *\r\n                 * @param {String} historyId\r\n                 * The history ID of the report to interact with.\r\n                 *\r\n                 * @param {BBUI.uimodeling.servicecontracts.CreateDataFormSessionArgs} [args]\r\n                 * Arguments to pass to the form session.\r\n                 *\r\n                 * @param {Object} [options]\r\n                 *\r\n                 * @param {Boolean} [options.showAllParameters]\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                createReportParameterFormSession: function (reportId, historyId, args, options) {\r\n\r\n                    var url;\r\n\r\n                    options = options || {};\r\n\r\n                    url = buildSvcBaseUrl(this, \"createReportParameterFormSession\") +\r\n                        \"&reportId=\" +\r\n                        euc(reportId);\r\n\r\n                    if (historyId) {\r\n                        url += \"&historyId=\" + euc(historyId);\r\n                    }\r\n\r\n                    if (options.showAllParameters) {\r\n                        url += \"&showAllParameters=true\";\r\n                    }\r\n\r\n                    return doPost(this, url, args);\r\n                },\r\n\r\n                /**\r\n                 * Creates an instance of the business process's parameter form on the server.\r\n                 *\r\n                 * @param {String} businessProcessId\r\n                 * The ID of the data form instance to interact with.\r\n                 *\r\n                 * @param {BBUI.uimodeling.servicecontracts.CreateDataFormSessionArgs} [args]\r\n                 * Arguments to pass to the form session.\r\n                 *\r\n                 * @param {Object} [options]\r\n                 * An object literal that may contain any of the following properties:\r\n                 *\r\n                 * @param {String} [options.recordId]\r\n                 * The ID of the record being edited.\r\n                 *\r\n                 * @param {String} [options.contextRecordId]\r\n                 * The ID of the record that provides the context for the record being added or edited.\r\n                 *\r\n                 * @param {String} [options.uiWidgetDashboardSystemId]\r\n                 *\r\n                 * @param {String} [options.uiWidgetDashboardWidgetId]\r\n                 *\r\n                 * @param {String} [options.userSettingsPath]\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                createBusinessProcessFormSession: function (businessProcessId, args, options) {\r\n\r\n                    var url;\r\n\r\n                    options = options || {};\r\n\r\n                    url = buildSvcBaseUrl(this, \"createBusinessProcessFormSession\") +\r\n                        \"&businessProcessId=\" +\r\n                        euc(businessProcessId);\r\n\r\n                    url = addOptionalFormSessionArgs(url, options);\r\n\r\n                    return doPost(this, url, args);\r\n                },\r\n\r\n                /**\r\n                 */\r\n                buildSearchListResultsUrl: function (formSessionId, modelInstanceId, htmlEncodeValues, returnFormattedValues, taskId, taskHistoryId, cancelId) {\r\n                    var url;\r\n\r\n                    url = BBUI.urlConcat(this.baseUrl, \"uimodel/UIModelingSearchService.ashx?databaseName=\") + euc(this.databaseName);\r\n\r\n                    if (this.runAs) {\r\n                        url += \"&runAs=\" + euc(this.runAs);\r\n                    }\r\n\r\n                    url +=\r\n                        \"&formSessionId=\" + euc(formSessionId) +\r\n                        \"&modelInstanceId=\" + euc(modelInstanceId);\r\n\r\n                    if (htmlEncodeValues) {\r\n                        url += \"&htmlEncodeValues=true\";\r\n                    }\r\n\r\n                    if (returnFormattedValues) {\r\n                        url += \"&returnFormattedValues=true\";\r\n                    }\r\n\r\n                    if (taskId) {\r\n                        url += \"&taskId=\" + euc(taskId);\r\n                    }\r\n\r\n                    if (taskHistoryId) {\r\n                        url += \"&taskHistoryId=\" + euc(taskHistoryId);\r\n                    }\r\n\r\n                    if (cancelId) {\r\n                        url += \"&cancelId=\" + euc(cancelId);\r\n                    }\r\n\r\n                    return url;\r\n                },\r\n\r\n                /**\r\n                 */\r\n                buildStartBusinessProcessUrl: function (businessProcessId, parameterSetId, dataFormItemKey, businessProcessStatusId) {\r\n                    var url;\r\n\r\n                    url =\r\n                        BBUI.urlConcat(this.baseUrl, \"uimodel/UIModelingBusinessProcessService.ashx?databaseName=\") + euc(this.databaseName) +\r\n                        \"&businessProcessId=\" + euc(businessProcessId);\r\n\r\n                    if (BBUI.is(parameterSetId)) {\r\n                        url += \"&parameterSetId=\" + euc(parameterSetId);\r\n                    }\r\n\r\n                    if (BBUI.is(dataFormItemKey)) {\r\n                        url += \"&dataFormItemKey=\" + euc(dataFormItemKey);\r\n                    }\r\n\r\n                    if (BBUI.is(businessProcessStatusId)) {\r\n                        url += \"&businessProcessStatusId=\" + euc(businessProcessStatusId);\r\n                    }\r\n\r\n                    if (this.runAs) {\r\n                        url += \"&runAs=\" + euc(this.runAs);\r\n                    }\r\n\r\n                    return url;\r\n                },\r\n\r\n                /**\r\n                 * Gets the output definition of a search.\r\n                 *\r\n                 * @param {String} formSessionId\r\n                 * The ID of the form session that contains the search list form model.\r\n                 *\r\n                 * @param {String} modelInstanceId\r\n                 * The ID of the search list form model.\r\n                 *\r\n                 * @param {Boolean} returnExistingResults\r\n                 *\r\n                 * @param {Object} [options]\r\n                 * An object literal that may contain any of the following properties:\r\n                 *\r\n                 * @param {String} [options.taskHistoryId]\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                searchListGetOutputDefinition: function (formSessionId, modelInstanceId, returnExistingResults, options) {\r\n\r\n                    var url = buildSvcBaseUrl(this, \"searchListGetOutputDefinition\", formSessionId, modelInstanceId) +\r\n                        \"&returnExistingResults=\" +\r\n                        (returnExistingResults ? \"true\" : \"false\");\r\n\r\n                    if (!options) {\r\n                        options = {};\r\n                    }\r\n\r\n                    if (options.taskHistoryId) {\r\n                        url += \"&taskHistoryId=\" + euc(options.taskHistoryId);\r\n                    }\r\n\r\n                    return doGet(this, url);\r\n                },\r\n\r\n                /**\r\n                 * Gets the results of a search.\r\n                 *\r\n                 * @param {String} formSessionId\r\n                 * The ID of the form session that contains the search list form model.\r\n                 *\r\n                 * @param {String} modelInstanceId\r\n                 * The ID of the search list form model.\r\n                 *\r\n                 * @param {Object} htmlEncodeValues\r\n                 *\r\n                 * @param {Object} [options]\r\n                 * An object literal that may contain any of the following properties:\r\n                 *\r\n                 * @param {Boolean} [options.returnFormattedValues]\r\n                 *\r\n                 * @param {String} [options.taskId]\r\n                 *\r\n                 * @param {String} [options.taskHistoryId]\r\n                 *\r\n                 * @param {String} [options.cancelId]\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                getSearchListResults: function (formSessionId, modelInstanceId, htmlEncodeValues, options) {\r\n\r\n                    var url;\r\n\r\n                    if (!options) {\r\n                        options = {};\r\n                    }\r\n\r\n                    // Append a timestamp to the end of the URL so the results aren't cached by the browser.\r\n                    url = this.buildSearchListResultsUrl(formSessionId,\r\n                        modelInstanceId,\r\n                        htmlEncodeValues,\r\n                        options.returnFormattedValues,\r\n                        options.taskId,\r\n                        options.taskHistoryId,\r\n                        options.cancelId) +\r\n                        \"&_reqid=\" + new Date().getTime();\r\n\r\n                    return doGet(this, url);\r\n                },\r\n\r\n                /**\r\n                 * Invokes the searchItemSelected event with the given search field.\r\n                 *\r\n                 * @param {String} formSessionId\r\n                 * The ID of the search form session.\r\n                 *\r\n                 * @param {String} modelInstanceId\r\n                 * The ID of the search model instance.\r\n                 *\r\n                 * @param {Number} selectedIndex\r\n                 * The zero-based index of the selected search result row.\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                invokeSearchItemSelected: function (formSessionId, modelInstanceId, selectedIndex) {\r\n\r\n                    var url = buildSvcBaseUrl(this, \"invokeSearchItemSelected\", formSessionId, modelInstanceId);\r\n\r\n                    return doPost(this, url, selectedIndex);\r\n                },\r\n\r\n                /**\r\n                 * Invokes the search list associated with the given search field.\r\n                 *\r\n                 * @param {String} formSessionId\r\n                 * The ID of the form session that contains the model and search field.\r\n                 *\r\n                 * @param {String} modelInstanceId\r\n                 * The ID of the model instance containing the search field.\r\n                 *\r\n                 * @param {String} fieldName\r\n                 * The name of the search field.\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                invokeFieldSearch: function (formSessionId, modelInstanceId, fieldName) {\r\n\r\n                    var url = buildSvcBaseUrl(this, \"invokeFieldSearch\", formSessionId, modelInstanceId, fieldName);\r\n\r\n                    return doPost(this, url);\r\n                },\r\n\r\n                /**\r\n                 * Invokes quick find on the given search field.\r\n                 *\r\n                 * @param {String} formSessionId\r\n                 * The ID of the form session that contains the model and search field.\r\n                 *\r\n                 * @param {String} modelInstanceId\r\n                 * The ID of the model instance containing the search field.\r\n                 *\r\n                 * @param {String} fieldName\r\n                 * The name of the search field.\r\n                 *\r\n                 * @param {String} criteria\r\n                 * The quick find criteria.\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                invokeFieldQuickFind: function (formSessionId, modelInstanceId, fieldName, criteria) {\r\n\r\n                    var url;\r\n\r\n                    url = BBUI.urlConcat(this.baseUrl, \"uimodel/UIModelingSearchService.ashx?databaseName=\" +\r\n                        euc(this.databaseName) +\r\n                        \"&formSessionId=\" +\r\n                        euc(formSessionId) +\r\n                        \"&modelInstanceId=\" +\r\n                        euc(modelInstanceId) +\r\n                        \"&fieldId=\" +\r\n                        euc(fieldName) +\r\n                        \"&quickFindCriteria=\" +\r\n                        euc(criteria));\r\n\r\n                    if (this.runAs) {\r\n                        url += \"&runAs=\" + euc(this.runAs);\r\n                    }\r\n\r\n                    return doPost(this, url);\r\n                },\r\n\r\n                /**\r\n                 * Invokes the search list associated with the given search field and executes the search.\r\n                 *\r\n                 * @param {String} formSessionId\r\n                 * The ID of the form session that contains the model and search field.\r\n                 *\r\n                 * @param {String} modelInstanceId\r\n                 * The ID of the model instance containing the search field.\r\n                 *\r\n                 * @param {String} fieldName\r\n                 * The name of the search field.\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                invokeFieldAutoSearch: function (formSessionId, modelInstanceId, fieldName) {\r\n\r\n                    var url;\r\n\r\n                    url = BBUI.urlConcat(this.baseUrl, \"uimodel/UIModelingSearchService.ashx?databaseName=\" +\r\n                        euc(this.databaseName) +\r\n                        \"&formSessionId=\" +\r\n                        euc(formSessionId) +\r\n                        \"&modelInstanceId=\" +\r\n                        euc(modelInstanceId) +\r\n                        \"&fieldId=\" +\r\n                        euc(fieldName) +\r\n                        \"&autoSearch=true\");\r\n\r\n                    if (this.runAs) {\r\n                        url += \"&runAs=\" + euc(this.runAs);\r\n                    }\r\n\r\n                    return doPost(this, url);\r\n                },\r\n\r\n                /**\r\n                 * Invokes quick find on the given search list.\r\n                 *\r\n                 * @param {String} searchListId\r\n                 * The ID of the search list.\r\n                 *\r\n                 * @param {String} criteria\r\n                 * The quick find criteria.\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                invokeQuickFind: function (searchListId, criteria) {\r\n\r\n                    var url;\r\n\r\n                    url = BBUI.urlConcat(this.baseUrl, \"uimodel/UIModelingSearchService.ashx?databaseName=\" +\r\n                        euc(this.databaseName) +\r\n                        \"&searchListId=\" +\r\n                        euc(searchListId) +\r\n                        \"&quickFindCriteria=\" +\r\n                        euc(criteria));\r\n\r\n                    if (this.runAs) {\r\n                        url += \"&runAs=\" + euc(this.runAs);\r\n                    }\r\n\r\n                    return doPost(this, url);\r\n                },\r\n\r\n                /**\r\n                 * Checks the current values of a data form session's fields to see if there are matching records already in the database.\r\n                 *\r\n                 * @param {String} formSessionId\r\n                 * The ID of the form session that contains the model.\r\n                 *\r\n                 * @param {String} modelInstanceId\r\n                 * The ID of the model instance containing the data.\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                checkForDuplicate: function (formSessionId, modelInstanceId) {\r\n\r\n                    var url;\r\n\r\n                    url = BBUI.urlConcat(this.baseUrl, \"uimodel/UIModelingSearchService.ashx?databaseName=\" +\r\n                        euc(this.databaseName) +\r\n                        \"&formSessionId=\" +\r\n                        euc(formSessionId) +\r\n                        \"&modelInstanceId=\" +\r\n                        euc(modelInstanceId) +\r\n                        \"&duplicateCheck=true\");\r\n\r\n                    if (this.runAs) {\r\n                        url += \"&runAs=\" + euc(this.runAs);\r\n                    }\r\n\r\n                    return doPost(this, url, null);\r\n                },\r\n\r\n                /**\r\n                 * Selects a search list row to represent the value of the search field.\r\n                 *\r\n                 * @param {String} formSessionId\r\n                 * The ID of the form session that contains the model and search field.\r\n                 *\r\n                 * @param {String} modelInstanceId\r\n                 * The ID of the model instance containing the search field.\r\n                 *\r\n                 * @param {String} fieldName\r\n                 * The name of the search field.\r\n                 *\r\n                 * @param {String} searchFormSessionId\r\n                 * The ID of the search form session that was invoked.\r\n                 *\r\n                 * @param {Number} selectedIndex\r\n                 * The zero-based index of the selected search result row.\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                selectFieldSearchItem: function (formSessionId, modelInstanceId, fieldName, searchFormSessionId, selectedIndex) {\r\n\r\n                    var url = buildSvcBaseUrl(this, \"selectFieldSearchItem\", formSessionId, modelInstanceId, fieldName) +\r\n                        \"&searchFormSessionId=\" +\r\n                        euc(searchFormSessionId);\r\n\r\n                    return doPost(this, url, selectedIndex);\r\n                },\r\n\r\n                /**\r\n                 * Selects a search list row to represent the value of the search field.\r\n                 *\r\n                 * @param {String} formSessionId\r\n                 * The ID of the form session that contains the model and search field.\r\n                 *\r\n                 * @param {String} modelInstanceId\r\n                 * The ID of the model instance containing the search field.\r\n                 *\r\n                 * @param {String} fieldName\r\n                 * The name of the search field.\r\n                 *\r\n                 * @param {String} recordId\r\n                 * The ID of the selected record.\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                selectFieldSearchItemById: function (formSessionId, modelInstanceId, fieldName, recordId) {\r\n\r\n                    var url = buildSvcBaseUrl(this, \"selectFieldSearchItemById\", formSessionId, modelInstanceId, fieldName);\r\n\r\n                    return doPost(this, url, recordId);\r\n                },\r\n\r\n                /**\r\n                 * Selects a search list row to represent the value of the search field.\r\n                 *\r\n                 * @param {String} formSessionId\r\n                 * The ID of the form session that contains the model and search field.\r\n                 *\r\n                 * @param {String} modelInstanceId\r\n                 * The ID of the model instance containing the search field.\r\n                 *\r\n                 * @param {String} actionName\r\n                 * The name of the search action.\r\n                 *\r\n                 * @param {String} searchFormSessionId\r\n                 * The ID of the search form session that was invoked.\r\n                 *\r\n                 * @param {Number} selectedIndex\r\n                 * The zero-based index of the selected search result row.\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                selectActionSearchItem: function (formSessionId, modelInstanceId, actionName, searchFormSessionId, selectedIndex) {\r\n\r\n                    var url = buildSvcBaseUrl(this, \"selectSearchItemAction\", formSessionId, modelInstanceId) +\r\n                        \"&actionId=\" + actionName +\r\n                        \"&searchFormSessionId=\" +\r\n                        euc(searchFormSessionId);\r\n\r\n                    return doPost(this, url, selectedIndex);\r\n                },\r\n\r\n                /**\r\n                 * Selects a search list row to represent the value of the search field.\r\n                 *\r\n                 * @param {String} formSessionId\r\n                 * The ID of the form session that contains the model and search field.\r\n                 *\r\n                 * @param {String} modelInstanceId\r\n                 * The ID of the model instance containing the search field.\r\n                 *\r\n                 * @param {String} actionName\r\n                 * The name of the search action.\r\n                 *\r\n                 * @param {String} recordId\r\n                 * The ID of the selected record.\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                selectActionSearchItemById: function (formSessionId, modelInstanceId, actionName, recordId) {\r\n\r\n                    var url = buildSvcBaseUrl(this, \"selectSearchItemActionById\", formSessionId, modelInstanceId) +\r\n                        \"&actionId=\" + actionName;\r\n\r\n                    return doPost(this, url, recordId);\r\n                },\r\n\r\n                /**\r\n                 * Updates a field on the form.\r\n                 *\r\n                 * @param {String} formSessionId\r\n                 * The ID of the form session that contains the model and field to be updated.\r\n                 *\r\n                 * @param {String} modelInstanceId\r\n                 * The ID of the model instance containing the field to be updated.\r\n                 *\r\n                 * @param {String} fieldName\r\n                 * The name of the field to be updated.\r\n                 *\r\n                 * @param {String|Number|Boolean|Object} value\r\n                 * The field's value.\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                updateField: function (formSessionId, modelInstanceId, fieldName, value) {\r\n\r\n                    var url = buildSvcBaseUrl(this, \"updateField\", formSessionId, modelInstanceId, fieldName);\r\n\r\n                    return doPost(this, url, value);\r\n                },\r\n\r\n                /**\r\n                 * Updates multiple fields on the form.\r\n                 *\r\n                 * @param {String} formSessionId\r\n                 * The ID of the form session that contains the model and fields to be updated.\r\n                 *\r\n                 * @param {String} modelInstanceId\r\n                 * The ID of the model instance containing the fields to be updated.\r\n                 *\r\n                 * @param {Object[]} fieldValues\r\n                 * @param {String} fieldValues.name\r\n                 * @param {Object} fieldValues.value\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                updateMultipleFields: function (formSessionId, modelInstanceId, fieldValues) {\r\n\r\n                    var url = buildSvcBaseUrl(this, \"updateMultipleFields\", formSessionId, modelInstanceId);\r\n\r\n                    return doPost(this, url, fieldValues);\r\n                },\r\n\r\n                /**\r\n                 * Updates one or more special properties on a relationship map field.\r\n                 *\r\n                 * @param {String} formSessionId\r\n                 * The ID of the form session that contains the model and field to be updated.\r\n                 *\r\n                 * @param {String} modelInstanceId\r\n                 * The ID of the model instance containing the field to be updated.\r\n                 *\r\n                 * @param {String} fieldName\r\n                 * The name of the field to be updated.\r\n                 *\r\n                 * @param {Object[]} properties\r\n                 * The properties on the relationship map field to update.\r\n                 * @param {String} properties.name\r\n                 * @param {Object} properties.value\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                updateRelationshipMapFieldProperties: function (formSessionId, modelInstanceId, fieldName, properties) {\r\n\r\n                    var url = buildSvcBaseUrl(this, \"updateRelationshipMapFieldProperties\", formSessionId, modelInstanceId, fieldName);\r\n\r\n                    return doPost(this, url, properties);\r\n                },\r\n\r\n                /**\r\n                 * Selects or de-selects the given tree view node.\r\n                 *\r\n                 * @param {String} formSessionId\r\n                 * The ID of the form session that contains the model and field to be updated.\r\n                 *\r\n                 * @param {String} modelInstanceId\r\n                 * The ID of the model instance containing the field to be updated.\r\n                 *\r\n                 * @param {String} fieldName\r\n                 * The name of the field to be updated.\r\n                 *\r\n                 * @param {String} nodePath\r\n                 * The fully qualified path of the node to select.\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                selectTreeViewNode: function (formSessionId, modelInstanceId, fieldName, nodePath) {\r\n\r\n                    var url = buildSvcBaseUrl(this, \"selectTreeViewNode\", formSessionId, modelInstanceId, fieldName) +\r\n                        \"&nodePath=\" +\r\n                        euc(nodePath);\r\n\r\n                    return doPost(this, url, null);\r\n                },\r\n\r\n                /**\r\n                 * Selects or de-selects the given tree view nodes.\r\n                 *\r\n                 * @param {String} formSessionId\r\n                 * The ID of the form session that contains the model and field to be updated.\r\n                 *\r\n                 * @param {String} modelInstanceId\r\n                 * The ID of the model instance containing the field to be updated.\r\n                 *\r\n                 * @param {String} fieldName\r\n                 * The name of the field to be updated.\r\n                 *\r\n                 * @param {String} nodePaths\r\n                 * The fully qualified path of each node to select.\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                selectTreeViewNodes: function (formSessionId, modelInstanceId, fieldName, nodePaths) {\r\n\r\n                    var url = buildSvcBaseUrl(this, \"selectTreeViewNodes\", formSessionId, modelInstanceId, fieldName);\r\n\r\n                    return doPost(this, url, nodePaths);\r\n                },\r\n\r\n                /**\r\n                 * Sets the expanded property on a tree view node.\r\n                 *\r\n                 * @param {String} formSessionId\r\n                 * The ID of the form session that contains the model and field to be updated.\r\n                 *\r\n                 * @param {String} modelInstanceId\r\n                 * The ID of the model instance containing the field to be updated.\r\n                 *\r\n                 * @param {String} fieldName\r\n                 * The name of the field to be updated.\r\n                 *\r\n                 * @param {String} nodePath\r\n                 * The fully qualified path of the node.\r\n                 *\r\n                 * @param {Boolean} expanded\r\n                 * A flag indicating whether the node is expanded.\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                setTreeViewNodeExpanded: function (formSessionId, modelInstanceId, fieldName, nodePath, expanded) {\r\n\r\n                    var url = buildSvcBaseUrl(this, \"setTreeViewNodeExpanded\", formSessionId, modelInstanceId, fieldName) +\r\n                        \"&nodePath=\" +\r\n                        euc(nodePath) +\r\n                        \"&expanded=\" +\r\n                        euc(expanded);\r\n\r\n                    return doPost(this, url, null);\r\n                },\r\n\r\n                /**\r\n                 * Adds a code table entry and sets the specified field's value to the new code table entry.\r\n                 *\r\n                 * @param {String} formSessionId\r\n                 * The ID of the form session that contains the model and field to be updated.\r\n                 *\r\n                 * @param {String} modelInstanceId\r\n                 * The ID of the model instance containing the field to be updated.\r\n                 *\r\n                 * @param {String} fieldName\r\n                 * The name of the field to be updated.\r\n                 *\r\n                 * @param {String|Number|Boolean|Object} codeTableEntryDescription\r\n                 * The description of the code table entry to add.\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                addCodeTableEntry: function (formSessionId, modelInstanceId, fieldName, codeTableEntryDescription) {\r\n\r\n                    var url = buildSvcBaseUrl(this, \"addCodeTableEntry\", formSessionId, modelInstanceId, fieldName);\r\n\r\n                    return doPost(this, url, codeTableEntryDescription);\r\n                },\r\n\r\n                /**\r\n                 * Deletes an item from a collection field.\r\n                 *\r\n                 * @param {String} formSessionId\r\n                 * The ID of the form session that contains the model and field to be updated.\r\n                 *\r\n                 * @param {String} modelInstanceId\r\n                 * The ID of the model instance containing the field to be updated.\r\n                 *\r\n                 * @param {String} fieldName\r\n                 * The name of the collection field containing the item to be deleted.\r\n                 *\r\n                 * @param {String} itemInstanceId\r\n                 * The ID of the item to be deleted.\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                deleteCollectionItem: function (formSessionId, modelInstanceId, fieldName, itemInstanceId) {\r\n\r\n                    var url = buildSvcBaseUrl(this, \"deleteCollectionItem\", formSessionId, modelInstanceId, fieldName) +\r\n                        \"&itemInstanceId=\" +\r\n                        euc(itemInstanceId);\r\n\r\n                    return doPost(this, url, null);\r\n                },\r\n\r\n                /**\r\n                 * Deletes items from a collection field.\r\n                 *\r\n                 * @param {String} formSessionId\r\n                 * The ID of the form session that contains the model and field to be updated.\r\n                 *\r\n                 * @param {String} modelInstanceId\r\n                 * The ID of the model instance containing the field to be updated.\r\n                 *\r\n                 * @param {String} fieldName\r\n                 * The name of the collection field containing the item to be deleted.\r\n                 *\r\n                 * @param {String[]} itemInstanceIds\r\n                 * The items to be deleted.\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                deleteCollectionItems: function (formSessionId, modelInstanceId, fieldName, itemInstanceIds) {\r\n\r\n                    var url = buildSvcBaseUrl(this, \"deleteCollectionItems\", formSessionId, modelInstanceId, fieldName);\r\n\r\n                    return doPost(this, url, itemInstanceIds);\r\n                },\r\n\r\n                /**\r\n                 * Deletes all selected items from a collection field.\r\n                 *\r\n                 * @param {String} formSessionId\r\n                 * The ID of the form session that contains the model and field to be updated.\r\n                 *\r\n                 * @param {String} modelInstanceId\r\n                 * The ID of the model instance containing the field to be updated.\r\n                 *\r\n                 * @param {String} fieldName\r\n                 * The name of the collection field containing the item to be deleted.\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                deleteSelectedCollectionItems: function (formSessionId, modelInstanceId, fieldName) {\r\n\r\n                    var url = buildSvcBaseUrl(this, \"deleteSelectedCollectionItems\", formSessionId, modelInstanceId, fieldName);\r\n\r\n                    return doPost(this, url, null);\r\n                },\r\n\r\n                /**\r\n                 * Selects or de-selects an item in a collection field.\r\n                 *\r\n                 * @param {String} formSessionId\r\n                 * The ID of the form session that contains the model and field to be updated.\r\n                 *\r\n                 * @param {String} modelInstanceId\r\n                 * The ID of the model instance containing the field to be updated.\r\n                 *\r\n                 * @param {String} fieldName\r\n                 * The name of the collection field to be updated.\r\n                 *\r\n                 * @param {String} itemInstanceId\r\n                 * The ID of the item.\r\n                 *\r\n                 * @param {Boolean} selected\r\n                 * The selected state of the item.\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                setCollectionItemSelected: function (formSessionId, modelInstanceId, fieldName, itemInstanceId, selected) {\r\n\r\n                    var url = buildSvcBaseUrl(this, \"selectCollectionItem\", formSessionId, modelInstanceId, fieldName) +\r\n                        \"&itemInstanceId=\" +\r\n                        euc(itemInstanceId) +\r\n                        \"&selected=\" +\r\n                        (selected ? \"true\" : \"false\");\r\n\r\n                    return doPost(this, url, null);\r\n                },\r\n\r\n                /**\r\n                 * Moves an item to a different position in the collection.\r\n                 *\r\n                 * @param {String} formSessionId\r\n                 * The ID of the form session that contains the model and field to be updated.\r\n                 *\r\n                 * @param {String} modelInstanceId\r\n                 * The ID of the model instance containing the field to be updated.\r\n                 *\r\n                 * @param {String} fieldName\r\n                 * The name of the collection field to be updated.\r\n                 *\r\n                 * @param {String} itemInstanceId\r\n                 * The ID of the item.\r\n                 *\r\n                 * @param {Number} newIndex\r\n                 * The new index (zero-based) for the item.\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                moveCollectionItem: function (formSessionId, modelInstanceId, fieldName, itemInstanceId, newIndex) {\r\n\r\n                    var url = buildSvcBaseUrl(this, \"moveCollectionItem\", formSessionId, modelInstanceId, fieldName) +\r\n                        \"&itemInstanceId=\" +\r\n                        euc(itemInstanceId) +\r\n                        \"&newindex=\" +\r\n                        euc(newIndex);\r\n\r\n                    return doPost(this, url, null);\r\n                },\r\n\r\n                /**\r\n                 * Saves the form instance on the server.\r\n                 *\r\n                 * @param {String} formSessionId\r\n                 * The ID of the form session to save.\r\n                 *\r\n                 * @param {Object} [options]\r\n                 * An object literal that may contain any of the following properties:\r\n                 *\r\n                 * @param {Boolean} [options.returnDataFormItem]\r\n                 * Flag indicating whether the data form item XML should be returned with the save result.  For backwards compatibility with the Windows ClickOnce shell.\r\n                 *\r\n                 * @param {Boolean} [options.storeDataFormItem]\r\n                 *\r\n                 * @param {Boolean} [options.skipValidate]\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                confirmForm: function (formSessionId, options) {\r\n\r\n                    var url;\r\n\r\n                    if (!BBUI.is(options)) {\r\n                        options = {};\r\n                    }\r\n\r\n                    url = buildSvcBaseUrl(this, \"confirmFormSession\", formSessionId);\r\n\r\n                    if (options.returnDataFormItem) {\r\n                        url += \"&returnDataFormItem=true\";\r\n                    }\r\n\r\n                    if (options.storeDataFormItem) {\r\n                        url += \"&storeDataFormItem=true\";\r\n                    }\r\n\r\n                    if (options.skipValidate) {\r\n                        url += \"&skipValidate=true\";\r\n                    }\r\n\r\n                    return doPost(this, url, null);\r\n                },\r\n\r\n                /**\r\n                 * Cancels the form instance on the server and removes it from the session.\r\n                 *\r\n                 * @param {String} formSessionId\r\n                 * The ID of the form session to cancel.\r\n                 *\r\n                 * @param {Boolean} overrideDirty\r\n                 * Flag indicating whether to cancel the form even if its values have changed since it was created.\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                cancelSession: function (formSessionId, overrideDirty) {\r\n\r\n                    var url;\r\n\r\n                    url = buildSvcBaseUrl(this, \"closeFormSession\", formSessionId);\r\n                    url += \"&canceling=true\";\r\n\r\n                    if (overrideDirty) {\r\n                        url += \"&overridedirty=true\";\r\n                    }\r\n\r\n                    return doPost(this, url, null);\r\n                },\r\n\r\n                /**\r\n                 * Sends a response to a prompt to the server.\r\n                 *\r\n                 * @param {String} formSessionId\r\n                 * The ID of the form session that caused the prompt.\r\n                 *\r\n                 * @param {String} modelInstanceId\r\n                 * ID of the model instance that caused the prompt.\r\n                 *\r\n                 * @param {String} promptId\r\n                 * The ID of the prompt being responded to.\r\n                 *\r\n                 * @param {String|Number|Boolean|Object} response\r\n                 * The prompt response.\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                handlePrompt: function (formSessionId, modelInstanceId, promptId, response) {\r\n\r\n                    var url = buildSvcBaseUrl(this, \"handlePrompt\", formSessionId, modelInstanceId) +\r\n                        \"&promptId=\" +\r\n                        euc(promptId);\r\n\r\n                    return doPost(this, url, response);\r\n                },\r\n\r\n                /**\r\n                 * Invokes an action on the server.\r\n                 *\r\n                 * @param {String} formSessionId\r\n                 * The ID of the form session that contains the action.\r\n                 *\r\n                 * @param {String} modelInstanceId\r\n                 * ID of the model instance that contains the action.\r\n                 *\r\n                 * @param {String} actionName\r\n                 * Name of the action to invoke.\r\n                 *\r\n                 * @param {Object} [options]\r\n                 * An object literal that may contain any of the following properties:\r\n                 *\r\n                 * @param {Object} [options.parameters]\r\n                 *\r\n                 * @param {Object} [options.defaultValues]\r\n                 *\r\n                 * @param {String} [options.cancelId]\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                invokeAction: function (formSessionId, modelInstanceId, actionName, options) {\r\n\r\n                    var data,\r\n                        url;\r\n\r\n                    url = buildSvcBaseUrl(this, \"invokeAction\", formSessionId, modelInstanceId) +\r\n                        \"&actionId=\" +\r\n                        euc(actionName);\r\n\r\n                    if (options) {\r\n                        if (options.parameters || options.defaultValues) {\r\n                            data = {};\r\n                            if (options.parameters) {\r\n                                data.parameters = options.parameters;\r\n                            }\r\n                            if (options.defaultValues) {\r\n                                data.defaultValues = options.defaultValues;\r\n                            }\r\n                        }\r\n                        if (options.cancelId) {\r\n                            url += \"&cancelId=\" + euc(options.cancelId);\r\n                        }\r\n                    } else {\r\n                        data = null;\r\n                    }\r\n\r\n                    return doPost(this, url, data);\r\n                },\r\n\r\n                /**\r\n                 * Confirms a child form that was shown as a result of a form action.\r\n                 *\r\n                 * @param {String} formSessionId\r\n                 * The ID of the form session.\r\n                 *\r\n                 * @param {String} modelInstanceId\r\n                 * ID of the model instance that invoked the action.\r\n                 *\r\n                 * @param {String} actionName\r\n                 * Name of the invoked action.\r\n                 *\r\n                 * @param {String} confirmFormSessionId\r\n                 * The ID of the child form session.\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                confirmFormAction: function (formSessionId, modelInstanceId, actionName, confirmFormSessionId) {\r\n\r\n                    var url = buildSvcBaseUrl(this, \"confirmFormAction\", formSessionId, modelInstanceId) +\r\n                        \"&actionId=\" +\r\n                        euc(actionName) +\r\n                        \"&confirmFormSessionId=\" +\r\n                        euc(confirmFormSessionId);\r\n\r\n                    return doPost(this, url, null);\r\n                },\r\n\r\n                /**\r\n                 * Cancels a child form that was shown as a result of a form action.\r\n                 *\r\n                 * @param {String} formSessionId\r\n                 * The ID of the form session.\r\n                 *\r\n                 * @param {String} modelInstanceId\r\n                 * ID of the model instance that invoked the action.\r\n                 *\r\n                 * @param {String} actionName\r\n                 * Name of the invoked action.\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                cancelFormAction: function (formSessionId, modelInstanceId, actionName) {\r\n\r\n                    var url = buildSvcBaseUrl(this, \"cancelFormAction\", formSessionId, modelInstanceId) +\r\n                        \"&actionId=\" +\r\n                        euc(actionName);\r\n\r\n                    return doPost(this, url, null);\r\n\r\n                },\r\n\r\n                /**\r\n                 * Server side notification that a close form request is being made.\r\n                 *\r\n                 * @param {String} formSessionId\r\n                 * The ID of the form session.\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                notifyFormHidden: function (formSessionId) {\r\n\r\n                    var url = buildSvcBaseUrl(this, \"notifyFormHidden\", formSessionId);\r\n\r\n                    return doPost(this, url, null);\r\n                },\r\n\r\n                /**\r\n                 * Server side notification that a close form request is being made.\r\n                 *\r\n                 * @param {String} formSessionId\r\n                 * The ID of the form session.\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                notifyFormShown: function (formSessionId) {\r\n\r\n                    var url = buildSvcBaseUrl(this, \"notifyFormShown\", formSessionId);\r\n\r\n                    return doPost(this, url, null);\r\n                },\r\n\r\n                /**\r\n                 * Selects a search list row to represent the value of the search field.\r\n                 *\r\n                 * @param {String} formSessionId\r\n                 * The ID of the form session that contains the model and search field.\r\n                 *\r\n                 * @param {String} modelInstanceId\r\n                 * The ID of the model instance containing the search field.\r\n                 *\r\n                 * @param {String} fieldName\r\n                 *\r\n                 * @param {String} start\r\n                 * The starting row which is being requested.  Start + paging size number of rows should be returned.\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                invokeCollectionPageChange: function (formSessionId, modelInstanceId, fieldName, start) {\r\n\r\n                    var url = buildSvcBaseUrl(this, \"invokeCollectionPageChange\", formSessionId, modelInstanceId, fieldName) +\r\n                        \"&start=\" + start;\r\n\r\n                    return doPost(this, url, null);\r\n                },\r\n\r\n                /**\r\n                 * Selects a search list row to represent the value of the search field.\r\n                 *\r\n                 * @param {String} formSessionId\r\n                 * The ID of the form session that contains the model and search field.\r\n                 *\r\n                 * @param {String} modelInstanceId\r\n                 * The ID of the model instance containing the search field.\r\n                 *\r\n                 * @param {String} fieldName\r\n                 *\r\n                 * @param {Object} selectionData\r\n                 * The selection data to be sent to the server. Conforms to the CollectionSelectionModel contract.\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                invokeCollectionSelectionUpdate: function (formSessionId, modelInstanceId, fieldName, selectionData) {\r\n\r\n                    var url = buildSvcBaseUrl(this, \"collectionSelectionUpdate\", formSessionId, modelInstanceId, fieldName);\r\n\r\n                    return doPost(this, url, selectionData);\r\n                },\r\n\r\n                /**\r\n                 * Selects a search list row to represent the value of the search field.\r\n                 *\r\n                 * @param {String} formSessionId\r\n                 * The ID of the form session that contains the model and search field.\r\n                 *\r\n                 * @param {String} modelInstanceId\r\n                 * The ID of the model instance containing the search field.\r\n                 *\r\n                 * @param {String} fieldName\r\n                 *\r\n                 * @param {String} actionName\r\n                 * The grid field special action name.\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                invokeCollectionSpecialAction: function (formSessionId, modelInstanceId, fieldName, actionName) {\r\n\r\n                    var url = buildSvcBaseUrl(this, \"invokeCollectionSpecialAction\", formSessionId, modelInstanceId, fieldName) +\r\n                        \"&actionname=\" + actionName;\r\n\r\n                    return doPost(this, url, null);\r\n                },\r\n\r\n                /**\r\n                 * Notifies the UIModel that a file has been selected in the file picker dialog.\r\n                 *\r\n                 * @param {String} formSessionId\r\n                 * The ID of the form session that contains the model and search field.\r\n                 *\r\n                 * @param {String} modelInstanceId\r\n                 * The ID of the model instance containing the search field.\r\n                 *\r\n                 * @param {String} fieldName\r\n                 *\r\n                 * @param {String} fileName\r\n                 * The name of the newly selected file.\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                invokeFileChanged: function (formSessionId, modelInstanceId, fieldName, fileName) {\r\n\r\n                    var url = buildSvcBaseUrl(this, \"selectFile\", formSessionId, modelInstanceId, fieldName);\r\n\r\n                    return doPost(this, url, fileName);\r\n                },\r\n\r\n                /**\r\n                 * Cancels an action on the server.\r\n                 *\r\n                 * @param {String} formSessionId\r\n                 * The ID of the form session that contains the model and search field.\r\n                 *\r\n                 * @param {String} modelInstanceId\r\n                 * The ID of the model instance containing the search field.\r\n                 *\r\n                 * @param {String} fieldId\r\n                 *\r\n                 * @param {String} cancelId\r\n                 * Uniquely identifies the running action on the server.\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                cancelAction: function (formSessionId, modelInstanceId, fieldId, cancelId) {\r\n\r\n                    var url = buildSvcBaseUrl(this, \"cancelAction\", formSessionId, modelInstanceId, fieldId) +\r\n                        \"&cancelId=\" + euc(cancelId);\r\n\r\n                    return doPost(this, url, null);\r\n                },\r\n\r\n                /**\r\n                 */\r\n                getFieldDataSourceUrl: function (formSessionId, modelInstanceId, fieldName) {\r\n                    return buildSvcBaseUrl(this, \"getFieldDataSource\", formSessionId, modelInstanceId, fieldName);\r\n                },\r\n\r\n                /**\r\n                 */\r\n                getFieldDataSource: function (formSessionId, modelInstanceId, fieldName) {\r\n                    var url = buildSvcBaseUrl(this, \"getFieldDataSource\", formSessionId, modelInstanceId, fieldName);\r\n                    return doGet(this, url);\r\n                },\r\n\r\n                /**\r\n                 */\r\n                getFieldImageUrl: function (formSessionId, modelInstanceId, fieldName) {\r\n                    return buildSvcBaseUrl(this, \"getFieldImage\", formSessionId, modelInstanceId, fieldName);\r\n                },\r\n\r\n                /**\r\n                 */\r\n                getFieldFileUrl: function (formSessionId, modelInstanceId, fieldName, options) {\r\n                    var url;\r\n\r\n                    url = buildSvcBaseUrl(this, \"getFieldFile\", formSessionId, modelInstanceId, fieldName);\r\n\r\n                    if (options && options.fileName) {\r\n                        url += \"&fileName=\" + euc(options.fileName);\r\n                    }\r\n\r\n                    return url;\r\n                },\r\n\r\n                /**\r\n                 */\r\n                getCustomFileUrl: function (formSessionId, modelInstanceId, key, fileName) {\r\n                    var url;\r\n\r\n                    url = buildSvcBaseUrl(this, \"getCustomFile\", formSessionId, modelInstanceId) +\r\n                        \"&key=\" +\r\n                        euc(key) +\r\n                        \"&fileName=\" + euc(fileName);\r\n\r\n                    return url;\r\n                },\r\n\r\n                /**\r\n                 */\r\n                getUploadFieldImageUrl: function (formSessionId, modelInstanceId, fieldName, thumbnailFieldName) {\r\n                    var url;\r\n\r\n                    url = buildSvcBaseUrl(this, \"uploadFieldImage\", formSessionId, modelInstanceId, fieldName);\r\n\r\n                    if (thumbnailFieldName) {\r\n                        url += \"&thumbnailFieldId=\" + euc(thumbnailFieldName);\r\n                    }\r\n\r\n                    return url;\r\n                },\r\n\r\n                /**\r\n                 * Gets the upload url for a file field.\r\n                 *\r\n                 * @param {String} fieldName\r\n                 * The name of the file field.\r\n                 *\r\n                 * @param {String} fileUploadKey\r\n                 * A unique ID to identify this upload instance.\r\n                 *\r\n                 * @param {Boolean} useChunkingUrl\r\n                 * Whether or not to return a base url that can be used for breaking up a file into multiple smaller uploads.\r\n                 *\r\n                 * @return {String}\r\n                 */\r\n                getUploadFieldFileUrl: function (fieldName, fileUploadKey, useChunkingUrl) {\r\n\r\n                    var url;\r\n\r\n                    useChunkingUrl = useChunkingUrl || false;\r\n\r\n                    url = BBUI.urlConcat(this.baseUrl, \"Upload/FileUpload.ashx?DBName=\" +\r\n                        euc(this.databaseName) +\r\n                        \"&FieldID=\" +\r\n                        euc(fieldName) +\r\n                        \"&FileUploadKey=\" +\r\n                        euc(fileUploadKey) +\r\n                        (useChunkingUrl === true ? \"\" : \"&InitialRequest=true\"));\r\n\r\n                    if (this.runAs) {\r\n                        url += \"&runAs=\" + euc(this.runAs);\r\n                    }\r\n\r\n                    return url;\r\n                },\r\n\r\n                /**\r\n                 */\r\n                createSearchListAddFormSession: function (dataFormSessionId,\r\n                    dataFormModelInstanceId,\r\n                    dataFormFieldName,\r\n                    searchFormSessionId,\r\n                    searchModelInstanceId,\r\n                    dataFormInstanceId) {\r\n\r\n                    var url = buildSvcBaseUrl(this, \"searchListAddFormInvoke\", dataFormSessionId, dataFormModelInstanceId, dataFormFieldName) +\r\n                        \"&dataFormInstanceId=\" + euc(dataFormInstanceId) +\r\n                        \"&searchFormSessionId=\" + euc(searchFormSessionId) +\r\n                        \"&searchModelInstanceId=\" + euc(searchModelInstanceId);\r\n\r\n                    return doPost(this, url, null);\r\n                },\r\n\r\n                /**\r\n                 */\r\n                createSearchListActionAddFormSession: function (dataFormSessionId,\r\n                    dataFormModelInstanceId,\r\n                    dataFormActionName,\r\n                    searchFormSessionId,\r\n                    searchModelInstanceId,\r\n                    dataFormInstanceId) {\r\n\r\n                    var url = buildSvcBaseUrl(this, \"actionSearchListAddFormInvoke\", dataFormSessionId, dataFormModelInstanceId) +\r\n                        \"&actionId=\" + euc(dataFormActionName) +\r\n                        \"&dataFormInstanceId=\" + euc(dataFormInstanceId) +\r\n                        \"&searchFormSessionId=\" + euc(searchFormSessionId) +\r\n                        \"&searchModelInstanceId=\" + euc(searchModelInstanceId);\r\n\r\n                    return doPost(this, url, null);\r\n                },\r\n\r\n                /**\r\n                 */\r\n                confirmSearchListAddForm: function (formSessionId,\r\n                    modelInstanceId,\r\n                    fieldName,\r\n                    confirmFormSessionId,\r\n                    ignoreConcurrency) {\r\n\r\n                    var url = buildSvcBaseUrl(this, \"searchListAddFormConfirm\", formSessionId, modelInstanceId, fieldName) +\r\n                        \"&confirmFormSessionId=\" + euc(confirmFormSessionId) +\r\n                        \"&ignoreConcurrency=\" + euc(ignoreConcurrency);\r\n\r\n                    return doPost(this, url, null);\r\n                },\r\n\r\n                /**\r\n                 */\r\n                confirmSearchListActionAddForm: function (formSessionId,\r\n                    modelInstanceId,\r\n                    actionName,\r\n                    confirmFormSessionId,\r\n                    ignoreConcurrency) {\r\n\r\n                    var url = buildSvcBaseUrl(this, \"actionSearchListAddFormConfirm\", formSessionId, modelInstanceId) +\r\n                        \"&actionId=\" + euc(actionName) +\r\n                        \"&confirmFormSessionId=\" + euc(confirmFormSessionId) +\r\n                        \"&ignoreConcurrency=\" + euc(ignoreConcurrency);\r\n\r\n                    return doPost(this, url, null);\r\n                },\r\n\r\n                /**\r\n                 */\r\n                confirmSearchListAddQuery: function (formSessionId, modelInstanceId, fieldName, queryInstanceId, selectionId) {\r\n                    var url = buildSvcBaseUrl(this, \"searchListAddQueryConfirm\", formSessionId, modelInstanceId) +\r\n                        \"&fieldId=\" +\r\n                        euc(fieldName) +\r\n                        \"&queryInstanceId=\" +\r\n                        euc(queryInstanceId) +\r\n                        \"&selectionId=\" +\r\n                        euc(selectionId);\r\n\r\n                    return doPost(this, url, null);\r\n                },\r\n\r\n                /**\r\n                 */\r\n                confirmQueryAction: function (formSessionId, modelInstanceId, actionName, queryInstanceId, selectionId, queryType) {\r\n                    var url = buildSvcBaseUrl(this, \"confirmQueryAction\", formSessionId, modelInstanceId) +\r\n                        \"&actionId=\" +\r\n                        euc(actionName) +\r\n                        \"&queryInstanceId=\" +\r\n                        euc(queryInstanceId) +\r\n                        \"&selectionId=\" +\r\n                        euc(selectionId) +\r\n                        \"&queryType=\" +\r\n                        euc(queryType);\r\n\r\n                    return doPost(this, url, null);\r\n                },\r\n\r\n                /**\r\n                 */\r\n                confirmSearchListAddExportDefinition: function (formSessionId, modelInstanceId, fieldName, exportDefinitionId) {\r\n                    var url = buildSvcBaseUrl(this, \"searchListAddExportDefinitionConfirm\", formSessionId, modelInstanceId) +\r\n                        \"&fieldId=\" +\r\n                        euc(fieldName) +\r\n                        \"&exportDefinitionId=\" +\r\n                        euc(exportDefinitionId);\r\n\r\n                    return doPost(this, url, null);\r\n                },\r\n\r\n                /**\r\n                 */\r\n                confirmExportDefinitionAction: function (formSessionId, modelInstanceId, actionName, exportDefinitionId) {\r\n                    var url = buildSvcBaseUrl(this, \"confirmExportDefinitionAction\", formSessionId, modelInstanceId) +\r\n                        \"&actionId=\" +\r\n                        euc(actionName) +\r\n                        \"&exportDefinitionId=\" +\r\n                        euc(exportDefinitionId);\r\n\r\n                    return doPost(this, url, null);\r\n                },\r\n\r\n                /**\r\n                 * Resets the values in the form instance.\r\n                 *\r\n                 * @param {String} formSessionId\r\n                 * The ID of the form session that contains the form instance.\r\n                 *\r\n                 * @param {String} modelInstanceId\r\n                 * The ID of the form model.\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                resetFormSession: function (formSessionId, modelInstanceId) {\r\n\r\n                    var url = buildSvcBaseUrl(this, \"resetFormSession\", formSessionId, modelInstanceId);\r\n\r\n                    return doPost(this, url, null);\r\n                },\r\n\r\n                /**\r\n                 * Refreshes the form with the latest data.\r\n                 *\r\n                 * @param {String} formSessionId\r\n                 * The ID of the form session that contains the form instance.\r\n                 *\r\n                 * @param {String} modelInstanceId\r\n                 * The ID of the form model.\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                refreshFormSession: function (formSessionId, modelInstanceId) {\r\n\r\n                    var url = buildSvcBaseUrl(this, \"refreshFormSession\", formSessionId, modelInstanceId);\r\n\r\n                    return doPost(this, url, null);\r\n                },\r\n\r\n                /**\r\n                 * Notifies the server that a duplicate record has been selected in the context of a form session instead of creating a new record.\r\n                 *\r\n                 * @param {String} formSessionId\r\n                 * The ID of the form session that contains the form instance.\r\n                 *\r\n                 * @param {String} modelInstanceId\r\n                 * The ID of the form model.\r\n                 *\r\n                 * @param {String} recordId\r\n                 * The ID of the duplicate record.\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                selectDuplicateRecord: function (formSessionId, modelInstanceId, recordId) {\r\n\r\n                    var url = buildSvcBaseUrl(this, \"selectDuplicateRecord\", formSessionId, modelInstanceId) +\r\n                        \"&selectedRecordId=\" + euc(recordId);\r\n\r\n                    return doPost(this, url, null);\r\n                },\r\n\r\n                /**\r\n                 * Starts a business process on the server with the information contained in the form session.\r\n                 *\r\n                 * @param {String} businessProcessId\r\n                 * The ID of the business process to start.\r\n                 *\r\n                 * @param {String} parameterSetId\r\n                 * The ID of the parameter set for the business process.\r\n                 *\r\n                 * @param {String} dataFormItemKey\r\n                 * The key of the data form item stored on the server.\r\n                 *\r\n                 * @param {Object} [options]\r\n                 * An object literal that may contain any of the following properties:\r\n                 *\r\n                 * @param {String} [options.businessProcessStatusId]\r\n                 *\r\n                 * @param {Object} [options.values]\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                startBusinessProcess: function (businessProcessId, parameterSetId, dataFormItemKey, options) {\r\n\r\n                    var url,\r\n                        data,\r\n                        businessProcessStatusId;\r\n\r\n                    options = options || {};\r\n\r\n                    businessProcessStatusId = options.businessProcessStatusId;\r\n\r\n                    url = this.buildStartBusinessProcessUrl(businessProcessId, parameterSetId, dataFormItemKey, businessProcessStatusId);\r\n\r\n                    if (!dataFormItemKey && options.values) {\r\n                        data = {\r\n                            values: options.values\r\n                        };\r\n                    }\r\n\r\n                    return doPost(this, url, data);\r\n                },\r\n\r\n                /**\r\n                 */\r\n                selectDuplicateRecordAction: function (formSessionId, modelInstanceId, actionName, duplicateFormSessionId, recordId) {\r\n                    var url = buildSvcBaseUrl(this, \"selectDuplicateRecordAction\", formSessionId, modelInstanceId) +\r\n                        \"&duplicateFormSessionId=\" + euc(duplicateFormSessionId) +\r\n                        \"&actionId=\" + euc(actionName) +\r\n                        \"&selectedRecordId=\" + euc(recordId);\r\n\r\n                    return doPost(this, url, null);\r\n                },\r\n\r\n                /**\r\n                 */\r\n                invokeRelationshipMapNodeAction: function (formSessionId, modelInstanceId, fieldId, nodeId, actionName) {\r\n                    var url = buildSvcBaseUrl(this, \"relationshipMapNodeInvokeAction\", formSessionId, modelInstanceId, fieldId) +\r\n                        \"&nodeId=\" + euc(nodeId) +\r\n                        \"&actionName=\" + euc(actionName);\r\n\r\n                    return doPost(this, url, null);\r\n                },\r\n\r\n                /**\r\n                 */\r\n                buildReportHostUrl: function (reportId, options) {\r\n                    var url;\r\n\r\n                    url = BBUI.urlConcat(this.baseUrl, \"uimodel/ReportHost.aspx?databaseName=\") +\r\n                        euc(this.databaseName) +\r\n                        \"&reportId=\" +\r\n                        euc(reportId);\r\n\r\n                    options = options || {};\r\n\r\n                    if (options.historyId) {\r\n                        url += \"&historyId=\" + euc(options.historyId);\r\n                    }\r\n\r\n                    if (options.formSessionId) {\r\n                        url += \"&formSessionId=\" + euc(options.formSessionId);\r\n                    }\r\n\r\n                    if (options.modelInstanceId) {\r\n                        url += \"&modelInstanceId=\" + euc(options.modelInstanceId);\r\n                    }\r\n\r\n                    if (BBUI.is(options.showToolbar)) {\r\n                        url += \"&showToolbar=\" + euc(options.showToolbar);\r\n                    }\r\n\r\n                    if (BBUI.is(options.runAs)) {\r\n                        url += \"&runAs=\" + euc(options.runAs);\r\n                    }\r\n\r\n                    if (options.showParameterPrompts) {\r\n                        url += \"&showParameterPrompts=true\";\r\n                    }\r\n\r\n                    if (options.showPromptAreaButton) {\r\n                        url += \"&showPromptAreaButton=true\";\r\n                    }\r\n\r\n                    if (options.displayPromptArea) {\r\n                        url += \"&displayPromptArea=\" + euc(options.displayPromptArea);\r\n                    }\r\n\r\n                    url += BBUI.arrayToQueryString(options.parameters, \"p_\", true);\r\n\r\n                    return url;\r\n                },\r\n\r\n                /**\r\n                 * Performs validation on a form session.\r\n                 *\r\n                 * @param {String} formSessionId\r\n                 * The ID of the form session to validate.\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                validateFormSession: function (formSessionId) {\r\n\r\n                    var url;\r\n\r\n                    url = buildSvcBaseUrl(this, \"validateformsession\", formSessionId);\r\n\r\n                    return doPost(this, url, null);\r\n                },\r\n\r\n                /**\r\n                 */\r\n                removeFromQueue: function (formSessionId, modelInstanceId, options) {\r\n                    var i,\r\n                        n,\r\n                        event,\r\n                        eventQueue,\r\n                        queue;\r\n\r\n                    if (!this._formSessionQueue) {\r\n                        return;\r\n                    }\r\n\r\n                    queue = this._formSessionQueue[formSessionId];\r\n\r\n                    if (queue && queue.eventQueue && queue.eventQueue.length) {\r\n                        eventQueue = queue.eventQueue;\r\n                        for (i = 0, n = eventQueue.length; i < n; ++i) {\r\n                            // find the url connection string in this entity, and attempt match. It is always at [2]\r\n                            event = eventQueue[i][2].toLowerCase();\r\n\r\n                            if (!(options.action && event.indexOf(options.action.toLowerCase()) === -1) &&\r\n                                    !(options.fieldName && event.indexOf(options.fieldName.toLowerCase()) === -1)) {\r\n                                eventQueue.splice(i, 1);\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * returns dataform item for a given form session and model instance.\r\n                 *\r\n                 * @param {String} formSessionId\r\n                 * The ID of the form session to validate.\r\n                 *\r\n                 * @param {String} modelInstanceId\r\n                 *\r\n                 * @return {promise}\r\n                 */\r\n                getFormSessionDataFormItemXml: function (formSessionId, modelInstanceId) {\r\n\r\n                    var url = buildSvcBaseUrl(this, \"getFormSessionDataFormItemXml\", formSessionId, modelInstanceId);\r\n\r\n                    return doGet(this, url);\r\n                },\r\n\r\n                /**\r\n                 */\r\n                reportActionFormSaved: function (formSessionId, modelInstanceId, actionName) {\r\n\r\n                    var url = buildSvcBaseUrl(this, \"reportActionFormSaved\", formSessionId, modelInstanceId) +\r\n                        \"&actionId=\" + euc(actionName);\r\n\r\n                    return doPost(this, url, null);\r\n                },\r\n\r\n                /**\r\n                 */\r\n                clearParameterDetail: function (formSessionId, modelInstanceId, parameterDetailName) {\r\n                    var url;\r\n\r\n                    url = buildSvcBaseUrl(this, \"clearParameterDetail\") +\r\n                        \"&formSessionId=\" + euc(formSessionId) +\r\n                        \"&modelInstanceId=\" + euc(modelInstanceId) +\r\n                        \"&parameterDetailName=\" + euc(parameterDetailName);\r\n\r\n                    return doPost(this, url, null);\r\n                },\r\n\r\n                /**\r\n                 */\r\n                cancelAsyncOperation: function (cancelId) {\r\n\r\n                    var url = BBUI.urlConcat(this.baseUrl, \"uimodel/UIModelingCancelAsyncOperation.ashx?databaseName=\") +\r\n                        euc(this.databaseName) +\r\n                        \"&cancelId=\" +\r\n                        euc(cancelId);\r\n\r\n                    return doGet(this, url);\r\n                }\r\n            };\r\n\r\n            /**\r\n             * @class bbui.uimodelingservice.bbuiUIModelingService\r\n             *\r\n             */\r\n            return {\r\n                /**\r\n                 * Create an instance of the UIModeling service.\r\n                 *\r\n                 * @param {String} [baseUrl=bbuiUIModelingServiceConfig.baseUrl]\r\n                 *\r\n                 * @param {String} [databaseName=bbuiUIModelingServiceConfig.databaseName]\r\n                 *\r\n                 * @param {Object} [options]\r\n                 *\r\n                 * @param {Object} options.runAs\r\n                 *\r\n                 * @param {Object} options.onRequestBegin\r\n                 *\r\n                 * @param {Object} options.onRequestEnd\r\n                 *\r\n                 * @param {Object} options.httpHeaders\r\n                 *\r\n                 * @param {Object} options.useEventQueue\r\n                 *\r\n                 * @return {bbui.uimodelingservice.bbuiUIModelingService.Service}\r\n                 * @return {Object} return.http\r\n                 * $http TODO this property is referenced via `$http`, not `http`. Need to get docs to render properly.\r\n                 */\r\n                create: function (baseUrl, databaseName, options) {\r\n                    var svc;\r\n\r\n                    baseUrl = baseUrl || bbuiUIModelingServiceConfig.baseUrl;\r\n                    databaseName = databaseName || bbuiUIModelingServiceConfig.databaseName;\r\n\r\n                    if (baseUrl === null || !databaseName) {\r\n                        throw new Error('You must either provide a baseUrl and databaseName as parameters or set them globally using bbuiShellServiceConfig.');\r\n                    }\r\n\r\n                    svc = new Service(baseUrl, databaseName, options);\r\n                    svc.$http = $http;\r\n\r\n                    return svc;\r\n                }\r\n            };\r\n        }]);\r\n\r\n}(this));\r\n",
    "/*global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    angular.module(\"infinity.util\", [])\r\n    .factory(\"browserUtilities\", [\"mockableUtilities\", function (mockableUtilities) {\r\n\r\n        /**\r\n         * Get the parameters from the query string.\r\n         *\r\n         * @return {Object}\r\n         */\r\n        function getQueryStringParameters() {\r\n\r\n            // Adapted from: https://www.developerdrive.com/2013/08/turning-the-querystring-into-a-json-object-using-javascript/\r\n\r\n            var queryString = mockableUtilities.getWindowLocation().search,\r\n                pairs = queryString.toLowerCase().slice(1).split('&'),\r\n                result = {};\r\n\r\n            if (queryString === '') {\r\n                return {};\r\n            }\r\n            \r\n            if (pairs) {\r\n                pairs.forEach(function (pair) {\r\n                    pair = pair.split('=');\r\n                    \r\n                    if (!pair[1]) {\r\n                        result[pair[0]] = null;\r\n                    } else {\r\n                        result[pair[0]] = decodeURIComponent(pair[1]);\r\n                    }\r\n                });\r\n            }\r\n            \r\n            return JSON.parse(JSON.stringify(result));\r\n        }\r\n\r\n        /**\r\n         * Redirect the page.\r\n         *\r\n         * @param {String} redirectUrl\r\n         */\r\n        function redirect(redirectUrl) {\r\n            mockableUtilities.getWindowLocation().replace(redirectUrl);\r\n        }\r\n\r\n        return {\r\n            getWindowLocation: mockableUtilities.getWindowLocation,\r\n            getQueryStringParameters: getQueryStringParameters,\r\n            redirect: redirect\r\n        };\r\n    }]);\r\n\r\n}());\r\n",
    "/*jshint browser: true */\r\n/*global angular, console */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    angular.module(\"infinity.util\")\r\n    .factory(\"infinityUtilities\", [\"mockableUtilities\", \"bbMoment\", 'bbuiShellServiceConfig', 'browserUtilities', \r\n    function (mockableUtilities, bbMoment, bbuiShellServiceConfig, browserUtilities) {\r\n\r\n        var euc = encodeURIComponent,\r\n            initialized = false,\r\n            rootFolder,\r\n            isCustomApp,\r\n            GUID_EMPTY = '00000000-0000-0000-0000-000000000000';\r\n\r\n        function initialize(rootFolderName, isCustom) {\r\n            rootFolder = rootFolderName;\r\n            isCustomApp = isCustom;\r\n            initialized = true;\r\n            bbuiShellServiceConfig.baseUrl = \"/\" + getVirtualDirectory();\r\n            bbuiShellServiceConfig.databaseName = browserUtilities.getQueryStringParameters().databasename;\r\n        }\r\n\r\n        /**\r\n         * Get the virtual directory name.\r\n         *\r\n         * @return {String}\r\n         */\r\n        function getVirtualDirectory() {\r\n\r\n            var parser,\r\n                path;\r\n\r\n            if (!initialized) {\r\n                console.error('getVirtualDirectory called before initialized');\r\n            }\r\n\r\n            parser = document.createElement('a');\r\n            parser.href = mockableUtilities.getWindowLocation().href;\r\n\r\n            path = parser.pathname; // i.e. /bbappfx/sky/frog/index.html\r\n\r\n            path = path.substring(0, path.indexOf((isCustomApp ? '/browser/htmlforms/custom/' : '/sky/') + rootFolder));\r\n\r\n            if (path[0] === \"/\") {\r\n                path = path.substring(1);\r\n            }\r\n\r\n            return path;\r\n\r\n        }\r\n\r\n        function getDatabaseName() {\r\n            return bbuiShellServiceConfig.databaseName;\r\n        }\r\n\r\n        /**\r\n         * Get the Infinity login URL.\r\n         *\r\n         * @param {String} databaseName\r\n         */\r\n        function getWebShellLoginUrl(databaseName, status) {\r\n\r\n            var url,\r\n                redirectUrl = mockableUtilities.getWindowLocation().href,\r\n                index = redirectUrl.indexOf(\"wsfederationlogin\"),\r\n                actualUrl = redirectUrl.split('&')[0];\r\n\r\n            if (!initialized) {\r\n                console.error('getWebShellLoginUrl called before initialized');\r\n            }\r\n\r\n            url = \"/\" + getVirtualDirectory() + \"/webui/WebShellLogin.aspx?databaseName=\" + euc(databaseName);\r\n\r\n            if (index !== -1) {\r\n                url += \"&action=wsfederationlogin\";\r\n            }\r\n\r\n            url += \"&url=\" + euc(actualUrl);\r\n\r\n            if (status) {\r\n                url += \"&status=\" + euc(status);\r\n            }\r\n\r\n            return url;\r\n        }\r\n\r\n        /**\r\n         * Convert a Blackbaud.AppFx.HourMinute to a readable string.\r\n         *\r\n         * @param {String} hourMinute\r\n         *\r\n         * @return {String}\r\n         * The formatted time, such as \"2:00 PM\".\r\n         */\r\n        function convertHourMinute(hourMinute) {\r\n\r\n            var result = \"\",\r\n                time,\r\n                hour,\r\n                minute;\r\n\r\n            if (hourMinute && typeof hourMinute === \"string\" &&\r\n                hourMinute.length === 4 && hourMinute !== \"    \") {\r\n\r\n                hour = parseInt(hourMinute.substring(0, 2));\r\n                minute = parseInt(hourMinute.substring(2, 4));\r\n\r\n                time = bbMoment({ hour: hour, minute: minute });\r\n                result = time.format(\"LT\");\r\n\r\n            }\r\n\r\n            return result;\r\n\r\n        }\r\n\r\n        function toUpperIdOrNullIfEmpty(id) {\r\n            if (!id || id === GUID_EMPTY) {\r\n                return null;\r\n            }\r\n    \r\n            return id.toUpperCase();\r\n        }\r\n\r\n        // Using this function in order to keep from accidentally modifying\r\n        // an options object passed into a function.\r\n        function cloneOrNew(bbui, options) {\r\n            if (options) {\r\n                return bbui.clone(options);\r\n            }\r\n\r\n            return {};\r\n        }\r\n\r\n        return {\r\n            initialize: initialize,\r\n            getVirtualDirectory: getVirtualDirectory,\r\n            getDatabaseName: getDatabaseName,\r\n            getWebShellLoginUrl: getWebShellLoginUrl,\r\n            convertHourMinute: convertHourMinute,\r\n            toUpperIdOrNullIfEmpty: toUpperIdOrNullIfEmpty,\r\n            cloneOrNew: cloneOrNew,\r\n            configuration: {\r\n                isCustomApp: isCustomApp\r\n            }\r\n        };\r\n\r\n    }])\r\n\r\n    .factory(\"infinityAuth\", [\"infinityUtilities\", \"browserUtilities\", \"bbuiShellService\", \"$q\",\r\n    function (infinityUtilities, browserUtilities, bbuiShellService, $q) {\r\n\r\n        var svc,\r\n            authenticateSuccessCallback,\r\n            authenticateFailureCallback,\r\n            authenticateFinallyCallback,\r\n            FORMS_AUTH_HEADER = \"X-BB-FormsAuth\",\r\n            noop = angular.noop;\r\n\r\n        function sessionStartSuccess(reply) {\r\n            authenticateSuccessCallback(reply.data);\r\n            authenticateFinallyCallback();\r\n        }\r\n\r\n        function sessionStartFailure(data, status, headers) {\r\n\r\n            var //formsAuthInUse,\r\n                redirectUrl;\r\n            //wsFederationEnabled,\r\n            //authHeader,\r\n            //isBearerAuthenticated,\r\n            //homePageUrl;\r\n\r\n            //homePageUrl = BBUI.urlConcat(svc.baseUrl, \"browser/Default.aspx\");\r\n            //homePageUrl += \"?DatabaseName=\" + encodeURIComponent(svc.databaseName);\r\n\r\n            //wsFederationEnabled = false;\r\n\r\n            //When using Federated Authentication, there may be a \"Bearer\" WWW-Authenticate header;\r\n            //But if the session start failed, all we can do is display the error on the login/migration form\r\n            //formsAuthInUse = (!authHeader || isBearerAuthenticated) || wsFederationEnabled;\r\n\r\n            // Unauthorized (401)\r\n            // NotFound (404) implies WSFederation Authenticated but unable to match to AppUser\r\n            if ((status === 401) || (status === 404)) {\r\n\r\n                //if (formsAuthInUse) {\r\n                // Forms authentication is configured on the server.  Redirect to the login page.\r\n                redirectUrl = infinityUtilities.getWebShellLoginUrl(svc.databaseName, headers(FORMS_AUTH_HEADER));\r\n                //} else {\r\n                //    // Basic authentication is enabled and the user probably canceled the browser's\r\n                //    // credentials prompt.  Redirect to the start page.\r\n                //    redirectUrl = homePageUrl;\r\n                //}\r\n                browserUtilities.redirect(redirectUrl);\r\n                authenticateFinallyCallback();\r\n                // Don't call failure callback because we're just redirecting anyway.\r\n            } else {\r\n                // Unsure what the response object looks like with non-401 error codes.\r\n                // I think this should get the user something that is possibly helpful.\r\n                if (!data || !data.message) {\r\n                    data = {\r\n                        message: data\r\n                    };\r\n                }\r\n                authenticateFailureCallback(data);\r\n                authenticateFinallyCallback();\r\n                //$(document.body).html(Res.getEncodedString(\"Viewport_NavigationLoadFail\", false, error.message));\r\n            }\r\n\r\n        }\r\n\r\n        function startSession() {\r\n\r\n            // Need to save HTTP object since we need to do both .then and .error,\r\n            // which are not supported together.\r\n            var http = svc.sessionStart();\r\n\r\n            http.then(sessionStartSuccess);\r\n\r\n            http.error(sessionStartFailure);\r\n\r\n        }\r\n\r\n        function authenticateAsync(successCallback, failureCallback, finallyCallback) {\r\n\r\n            var httpHeaders = {};\r\n\r\n            authenticateSuccessCallback = successCallback || noop;\r\n            authenticateFailureCallback = failureCallback || noop;\r\n            authenticateFinallyCallback = finallyCallback || noop;\r\n\r\n            // Add a custom HTTP header to all requests so the server will send back a 401 response without a challenge\r\n            // header when the user logs in unsuccessfully.  This will keep the user from being prompted for credentials\r\n            // by the browser.\r\n            httpHeaders[FORMS_AUTH_HEADER] = \"true\";\r\n\r\n            try {\r\n\r\n                svc = bbuiShellService.create(null, null, {\r\n                    httpHeaders: httpHeaders\r\n                });\r\n\r\n                startSession();\r\n\r\n            } catch (ex) {\r\n                failureCallback(ex);\r\n                finallyCallback();\r\n            }\r\n\r\n        }\r\n\r\n        /**\r\n         * @returns {Promise<Boolean>}\r\n         * True if the logout was successful.\r\n         * Unsuccessful logout typically means\r\n         * the user is not using custom authentication.\r\n         */\r\n        function logoutAsync() {\r\n            return bbuiShellService\r\n                .create()\r\n                .logout()\r\n                .then(function (reply) {\r\n                    return reply.data;\r\n                }, function (reply) {\r\n                    var error = { message: \"\" };\r\n\r\n                    if (reply && reply.data && reply.data.message) {\r\n                        error.message = reply.data.message;\r\n                    }\r\n\r\n                    $q.reject(error);\r\n                });\r\n        }\r\n\r\n        /**\r\n         * Get any `$httpProvider` interceptors necessary for authentication.\r\n         */\r\n        function getAuthInterceptors() {\r\n            return [\r\n                function () {\r\n                    return {\r\n                        \"responseError\": function (response) {\r\n                            var redirectUrl,\r\n                                status = response.status,\r\n                                FORMS_AUTH_HEADER = \"X-BB-FormsAuth\";\r\n                \r\n                            if (status === 401 || status === 404) {\r\n                                redirectUrl = infinityUtilities.getWebShellLoginUrl(browserUtilities.getQueryStringParameters().databasename,\r\n                                                                  response.headers(FORMS_AUTH_HEADER));\r\n                                browserUtilities.redirect(redirectUrl);\r\n                            }\r\n                \r\n                            return $q.reject(response);\r\n                        }\r\n                    };\r\n                }\r\n            ];\r\n        }\r\n\r\n        return {\r\n            authenticateAsync: authenticateAsync,\r\n            logoutAsync: logoutAsync,\r\n            getAuthInterceptors: getAuthInterceptors\r\n        };\r\n\r\n    }])\r\n\r\n    .factory(\"infinityCache\", [\"$cacheFactory\", function ($cacheFactory) {\r\n\r\n        var cache;\r\n\r\n        cache = $cacheFactory.get('bbcrm');\r\n        if (!cache) {\r\n            cache = $cacheFactory('bbcrm');\r\n        }\r\n\r\n        return {\r\n            cache: cache\r\n        };\r\n\r\n    }])\r\n\r\n    .factory(\"infinityProduct\", [\"bbui\", \"bbuiShellService\", \"infinityCache\", \"$q\", \r\n    function (bbui, bbuiShellService, infinityCache, $q) {\r\n        var infinityProduct,\r\n            svc;\r\n\r\n        infinityProduct = {\r\n            productIsInstalledAsync: productIsInstalledAsync\r\n        };\r\n\r\n        return infinityProduct;\r\n\r\n        /**\r\n         * Checks if a given product is installed.\r\n         * If the request fails, the error message will exist in the message property of the result.\r\n         * @param {String} productId\r\n         * @returns {Promise<Boolean>} true if the product is installed\r\n         */\r\n        function productIsInstalledAsync(productId) {\r\n            var InstalledProductsMobileDataListId = \"c495bc28-db3a-48dc-a980-259b0a0b08c1\",\r\n                cacheKey = \"dataListLoad-\" + InstalledProductsMobileDataListId,\r\n                cacheResult;\r\n\r\n            if (!productId || typeof productId !== \"string\") {\r\n                return $q.reject({ message: \"productId is required.\" });\r\n            }\r\n\r\n            productId = productId.toUpperCase();\r\n            cacheResult = infinityCache.cache.get(cacheKey);\r\n\r\n            if (cacheResult) {\r\n                return $q.resolve(cacheResult.installedProducts.indexOf(productId) !== -1);\r\n            }\r\n\r\n            svc = bbuiShellService.create();\r\n\r\n            return svc.dataListLoad(InstalledProductsMobileDataListId)\r\n                .then(function (reply) {\r\n                    var i,\r\n                        n,\r\n                        rows = reply.data.rows,\r\n                        data,\r\n                        installedProducts = [];\r\n\r\n                    data = {\r\n                        installedProducts: installedProducts\r\n                    };\r\n\r\n                    for (i = 0, n = rows.length; i < n; ++i) {\r\n                        installedProducts.push(rows[i].values[0].toUpperCase());\r\n                    }\r\n\r\n                    infinityCache.cache.put(cacheKey, bbui.clone(data));\r\n                    return installedProducts.indexOf(productId) !== -1;\r\n                }, function (reply) {\r\n                    var result = {};\r\n\r\n                    if (reply && reply.data && reply.data.message) {\r\n                        result.message = reply.data.message;\r\n                    }\r\n\r\n                    return $q.reject(result);\r\n                });\r\n        }\r\n    }]);\r\n\r\n}());",
    "/*jshint browser: true */\r\n/*global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    angular.module(\"infinity.util\")\r\n    .factory(\"mockableUtilities\", function () {\r\n\r\n        /**\r\n         * Get the current window location.\r\n         *\r\n         * This is a function by itself so that we can mock it for unit testing.\r\n         */\r\n        function getWindowLocation() {\r\n            return window.location;\r\n        }\r\n\r\n        return {\r\n            getWindowLocation: getWindowLocation\r\n        };\r\n\r\n    });\r\n\r\n}());",
    "/*global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    function slugFactory() {\r\n\r\n        function prependSlug(text, id) {\r\n\r\n            var slug;\r\n\r\n            if (!angular.isString(text) || text.length === 0) {\r\n                return id;\r\n            }\r\n\r\n            slug = text.toLowerCase();\r\n\r\n            if (String.prototype.trim) {\r\n                slug = slug.trim();\r\n            }\r\n\r\n            if (slug.lastIndexOf('?') === slug.length - 1) {\r\n                slug = slug.substr(0, slug.length - 1);\r\n            }\r\n\r\n            slug = slug.replace(/[^a-zA-Z0-9\\-\\.\\s]/gi, '').replace(/[\\s\\.]+/gi, '-');\r\n\r\n            return slug + '-' + id;\r\n        }\r\n\r\n        return {\r\n            prependSlug: prependSlug\r\n        };\r\n    }\r\n\r\n    angular.module('infinity.util').factory('slug', slugFactory);\r\n\r\n}());"
  ]
}